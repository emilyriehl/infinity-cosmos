/-
Copyright (c) 2024 Emily Riehl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: JHU Category Theory Seminar
-/
import InfinityCosmos.ForMathlib.InfinityCosmos.Basic

/-!
# Explicit isofibrations in an ‚àû-cosmos.

This file constructs a few explicit isofibrations in an ‚àû-cosmos as consequences of the axioms.

Simple examples include:

* `compIsofibration {A B C : K} (f : A ‚Ü† B) (g : B ‚Ü† C) : A ‚Ü† C`
* `pullbackIsofibration {E B A : K} (p : E ‚Ü† B) (f : A ‚ü∂ B) : pullbackIsofibrationObj p f ‚Ü† A`
* `toTerminalIsofibration (A : K) : A ‚Ü† (‚ä§_ K)`

More elaborate examples include:

* `cotensorCovIsofibration (V : SSet.{v}) {A B : K} (f : A ‚Ü† B) : V ‚ãî A ‚Ü† V ‚ãî B`
* `cotensorContraIsofibration {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] (A : K) : V ‚ãî A ‚Ü† U ‚ãî A`
* `leibnizCotensorIsofibration {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :`
    `V ‚ãî A ‚Ü† leibnizCotensorCod i f`

All but the first of these involve explicit choices of limits so are noncomputable.
-/

namespace InfinityCosmos

universe u v

open CategoryTheory Category PreInfinityCosmos SimplicialCategory Enriched Limits InfinityCosmos
open HasConicalTerminal

variable {K : Type u} [Category.{v} K] [InfinityCosmos K]

/-- The composite of isofibrations. -/
def compIsofibration {A B C : K} (f : A ‚Ü† B) (g : B ‚Ü† C) : A ‚Ü† C :=
  ‚ü®(f.1 ‚â´ g.1), comp_isIsofibration f g‚ü©

@[simp]
lemma compIsofibration_map {A B C : K} (f : A ‚Ü† B) (g : B ‚Ü† C) :
    (compIsofibration f g).1 = f.1 ‚â´ g.1 := rfl

/-- The object defined by pulling back an isofibration. -/
noncomputable def pullbackIsofibrationObj {E B A : K} (p : E ‚Ü† B) (f : A ‚ü∂ B) : K :=
  pullback p.1 f

/-- The object defined by pulling back an isofibration. -/
noncomputable def pullbackIsofibration {E B A : K} (p : E ‚Ü† B) (f : A ‚ü∂ B) :
    pullbackIsofibrationObj p f ‚Ü† A :=
  ‚ü®pullback.snd p.1 f, pullback_isIsofibration _ _ _ _ (IsPullback.of_hasPullback p.1 f)‚ü©

@[simp]
lemma pullbackIsofibration_map {E B A : K} (p : E ‚Ü† B) (f : A ‚ü∂ B) :
    (pullbackIsofibration p f).1 = pullback.snd p.1 f := rfl

theorem toTerminal_fibrant (A : K) : IsIsofibration (terminal.from A) :=
  all_objects_fibrant terminalIsConicalTerminal _

/-- The explicit map `terminal.from A` is an isofibration in an ‚àû-cosmos. -/
noncomputable def toTerminalIsofibration (A : K) : A ‚Ü† (‚ä§_ K) :=
  ‚ü®terminal.from A, toTerminal_fibrant A‚ü©

@[simp]
lemma toTerminalIsofibration_map (A : K) : (toTerminalIsofibration A).1 = terminal.from A := rfl

theorem binary_prod_map_fibrant {X Y X' Y' : K} {f : X ‚Ü† Y} {g : X' ‚Ü† Y'} :
    IsIsofibration (prod.map f.1 g.1) := by sorry

-- TODO: replace `cotensor.iso.underlying` with something for general cotensor API.
noncomputable def cotensorInitialIso (A : K) : (‚ä•_ SSet ) ‚ãî A ‚âÖ ‚ä§_ K where
  hom := terminal.from ((‚ä•_ SSet) ‚ãî A)
  inv := (cotensor.iso.underlying (‚ä•_ SSet) A (‚ä§_ K)).symm (initial.to (sHom (‚ä§_ K) A))
  hom_inv_id := (cotensor.iso.underlying (‚ä•_ SSet) A ((‚ä•_ SSet ) ‚ãî A)).injective
    (initial.hom_ext _ _)
  inv_hom_id := terminal.hom_ext _ _

noncomputable instance cotensorInitial_isTerminal (A : K) : IsTerminal ((‚ä•_ SSet ) ‚ãî A) :=
  terminalIsTerminal.ofIso (cotensorInitialIso A).symm

lemma cotensorCovMapInitial_isIso {A B : K} (f : A ‚ü∂ B) : IsIso (cotensorCovMap (‚ä•_ SSet) f) :=
  isIso_of_isTerminal (cotensorInitial_isTerminal A) (cotensorInitial_isTerminal B)
    (cotensorCovMap (‚ä•_ SSet) f)

-- TODO: replace `cotensor.iso.underlying` with something for general cotensor API.
noncomputable def cotensorToTerminalIso (U : SSet) {T : K} (hT : IsConicalTerminal SSet T) :
    U ‚ãî T ‚âÖ ‚ä§_ K where
  hom := terminal.from _
  inv := by
    refine (cotensor.iso.underlying U T (‚ä§_ K)).symm ?_
    exact (terminal.from U) ‚â´ (IsConicalTerminal.eHomIso SSet hT (‚ä§_ K)).inv
  hom_inv_id := by
    apply (cotensor.iso.underlying U T (U ‚ãî T)).injective
    have : IsTerminal (sHom (U ‚ãî T) T) :=
      terminalIsTerminal.ofIso (IsConicalTerminal.eHomIso SSet hT (U ‚ãî T)).symm
    apply IsTerminal.hom_ext this
  inv_hom_id := terminal.hom_ext _ _

noncomputable instance cotensorToConicalTerminal_isTerminal
    (U : SSet) {T : K} (hT : IsConicalTerminal SSet T) : IsTerminal (U ‚ãî T) :=
  terminalIsTerminal.ofIso (cotensorToTerminalIso U hT).symm

lemma cotensorContraMapToTerminal_isIso {U V : SSet} (i : U ‚ü∂ V)
    {T : K} (hT : IsConicalTerminal SSet T) : IsIso (cotensorContraMap i T) :=
  isIso_of_isTerminal (cotensorToConicalTerminal_isTerminal V hT)
    (cotensorToConicalTerminal_isTerminal U hT) (cotensorContraMap i T)

lemma cotensorInitialSquare_isPullback (V : SSet.{v}) {A B : K} (f : A ‚Ü† B) :
    IsPullback (terminal.from (V ‚ãî B) ‚â´ (cotensorInitialIso A).inv) (ùüô _)
      (cotensorCovMap (‚ä•_ SSet) f.1) (cotensorContraMap (initial.to V) B) := by
  have := cotensorCovMapInitial_isIso f.1
  refine IsPullback.of_vert_isIso ?_
  constructor
  apply IsTerminal.hom_ext (cotensorInitial_isTerminal _)

theorem cotensorCovMap_fibrant (V : SSet.{v}) {A B : K} (f : A ‚Ü† B) :
    IsIsofibration (cotensorCovMap V f.1) := by
  have := IsPullback.lift_snd
    (cotensorInitialSquare_isPullback V f) (cotensorContraMap (initial.to V) A)
    (cotensorCovMap V f.1) (cotensor_bifunctoriality (initial.to V) f.1)
  rw [‚Üê this, comp_id]
  exact
    (leibniz_cotensor_isIsofibration (initial.to V) f _ _ (cotensorInitialSquare_isPullback V f))

/-- An explicit isofibration obtained by cotensoring `V` with an isofibration `f`. -/
noncomputable def cotensorCovIsofibration (V : SSet.{v}) {A B : K} (f : A ‚Ü† B) : V ‚ãî A ‚Ü† V ‚ãî B :=
  ‚ü®cotensorCovMap V f.1, cotensorCovMap_fibrant V f‚ü©

@[simp]
lemma cotensorCovIsofibration_map (V : SSet.{v}) {A B : K} (f : A ‚Ü† B) :
    (cotensorCovIsofibration V f).1 = cotensorCovMap V f.1 := rfl

lemma cotensorTerminalSquare_isPullback {U V : SSet.{v}} (i : U ‚ü∂ V) (A : K) :
    IsPullback
      (ùüô _) (terminal.from (U ‚ãî A) ‚â´ (cotensorToTerminalIso V terminalIsConicalTerminal).inv)
      (cotensorCovMap U (terminal.from A)) (cotensorContraMap i (‚ä§_ K)) := by
  have := cotensorContraMapToTerminal_isIso i (T := ‚ä§_ K) terminalIsConicalTerminal
  refine IsPullback.of_horiz_isIso ?_
  constructor
  apply IsTerminal.hom_ext (cotensorToConicalTerminal_isTerminal U terminalIsConicalTerminal)

theorem cotensorContraMap_fibrant {U V : SSet} (i : U ‚ü∂ V) [Mono i] (A : K) :
    IsIsofibration (cotensorContraMap i A) := by
  have := IsPullback.lift_fst
    (cotensorTerminalSquare_isPullback i A) (cotensorContraMap i A)
    (cotensorCovMap V (terminal.from A)) (cotensor_bifunctoriality i (terminal.from A))
  rw [‚Üê this, comp_id]
  exact (leibniz_cotensor_isIsofibration i (toTerminalIsofibration A) _ _
    (cotensorTerminalSquare_isPullback i A))

/-- An explicit isofibration obtained by cotensoring a monomorphism `i` with `A`. -/
noncomputable def cotensorContraIsofibration {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] (A : K) :
    V ‚ãî A ‚Ü† U ‚ãî A := ‚ü®cotensorContraMap i A, cotensorContraMap_fibrant i A‚ü©

@[simp]
lemma cotensorContraIsofibration_map {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] (A : K) :
    (cotensorContraIsofibration i A).1 = cotensorContraMap i A := rfl

/-- An explicit choice of codomain for the Leibniz cotensor of a monomorphism and an
isofibration. -/
noncomputable def leibnizCotensorCod {U V : SSet} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :
    K := by
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  exact pullback (cotensorCovMap U f.1) (cotensorContraMap i B)

/-- An explicit choice of the top map in the Leibniz pullback square. -/
noncomputable def leibnizCotensor.fst {U V : SSet} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :
    leibnizCotensorCod i f ‚ü∂ U ‚ãî A := by
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  exact pullback.fst (cotensorCovMap U f.1) (cotensorContraMap i B)

/-- An explicit choice of the left map in the Leibniz pullback square. -/
noncomputable def leibnizCotensor.snd {U V : SSet} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :
    leibnizCotensorCod i f ‚ü∂ V ‚ãî B := by
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  exact pullback.snd (cotensorCovMap U f.1) (cotensorContraMap i B)

/-- An explicitly chosen Leibniz pullback square, as a commutative square . -/
noncomputable def leibnizCotensor.commSq {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K}
    (f : A ‚Ü† B) : CommSq (leibnizCotensor.fst i f) (leibnizCotensor.snd i f)
                    (cotensorCovMap U f.1) (cotensorContraMap i B) := by
  constructor
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  exact pullback.condition

/-- An explicitly chosen Leibniz pullback square. -/
noncomputable def leibnizCotensor.isPullback {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K}
    (f : A ‚Ü† B) : IsPullback (leibnizCotensor.fst i f) (leibnizCotensor.snd i f)
                    (cotensorCovMap U f.1) (cotensorContraMap i B) := by
  refine ‚ü®leibnizCotensor.commSq i f, ?_‚ü©
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  refine IsPullback.isLimit' ?_
  apply IsPullback.of_hasPullback

/-- An explicitly chosen Leibniz pullback square, as a pullback cone. -/
noncomputable def leibnizCotensor.pullbackCone {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K}
    (f : A ‚Ü† B) : PullbackCone (cotensorCovMap U f.1) (cotensorContraMap i B) := by
  have : HasPullback (cotensorCovMap U f.1) (cotensorContraMap i B) := by
    have : HasConicalPullback _ (cotensorCovMap U f.1) (cotensorContraMap i B) :=
      has_isofibration_pullbacks (cotensorCovIsofibration U f) (cotensorContraMap i B)
    infer_instance
  exact pullback.cone (cotensorCovMap U f.1) (cotensorContraMap i B)

/-- An explicitly chosen Leibniz cotensor map of a monomorphism `i` with an isofibration `f`. -/
noncomputable def leibnizCotensorMap {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :
    V ‚ãî A ‚ü∂ leibnizCotensorCod i f :=
  IsPullback.lift (leibnizCotensor.isPullback i f) (cotensorContraMap i A) (cotensorCovMap V f.1)
    (cotensor_bifunctoriality i f.1)

/-- An explicitly chosen Leibniz cotensor isofibration of a monomorphism `i` with an isofibration
`f`. -/
noncomputable def leibnizCotensorIsofibration {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K}
    (f : A ‚Ü† B) : V ‚ãî A ‚Ü† leibnizCotensorCod i f :=
  ‚ü®leibnizCotensorMap i f, leibniz_cotensor_isIsofibration _ _ _ _ _‚ü©

lemma leibnizCotensorIsofibration_map {U V : SSet.{v}} (i : U ‚ü∂ V) [Mono i] {A B : K} (f : A ‚Ü† B) :
    (leibnizCotensorIsofibration i f).1 = leibnizCotensorMap i f := rfl

end InfinityCosmos
