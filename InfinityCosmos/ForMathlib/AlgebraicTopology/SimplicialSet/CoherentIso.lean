/-
Copyright (c) 2024 Johns Hopkins Category Theory Seminar. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johns Hopkins Category Theory Seminar
-/

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialCategory.Basic
import Mathlib.AlgebraicTopology.SimplicialSet.Coskeletal
import Mathlib.AlgebraicTopology.SimplicialSet.Nerve
import Mathlib.CategoryTheory.CodiscreteCategory

universe u v u' v'

open CategoryTheory Nat

namespace CategoryTheory

/-- This is the free-living isomorphism as a category with objects called
`zero` and `one`. Perhaps these should have different names?-/
inductive WalkingIso : Type u where
  | zero : WalkingIso
  | one : WalkingIso

open WalkingIso

namespace WalkingIso

/-- The free isomorphism is the codiscrete category on two objects. Can we make this a special
case of the other definition?-/
instance : Category (WalkingIso) where
  Hom _ _ := Unit
  id _ := ‚ü®‚ü©
  comp _ _ := ‚ü®‚ü©

section

variable {C : Type u'} [Category.{v'} C]

/-- Functors out of `WalkingIso` define isomorphisms in the target category.-/
def toIso  (F : WalkingIso ‚•§ C) : (F.obj zero) ‚âÖ (F.obj one) where
  hom := F.map PUnit.unit
  inv := F.map PUnit.unit
  hom_inv_id := by rw [‚Üê F.map_comp, ‚Üê F.map_id]; rfl
  inv_hom_id := by rw [‚Üê F.map_comp, ‚Üê F.map_id]; rfl

/-- From an isomorphism in a category, one can build a functor out of `WalkingIso` to
that category.-/
def fromIso {X Y : C} (e : X ‚âÖ Y) : WalkingIso ‚•§ C where
  obj := fun
    | zero => X
    | one => Y
  map := @fun
    | zero, zero, _ => ùüô _
    | zero, one,  _ => e.hom
    | one,  zero, _ => e.inv
    | one,  one,  _ => ùüô _
  map_comp := by rintro (_ | _) (_ | _) (_ | _) _ _ <;> simp

def equiv : (WalkingIso ‚•§ C) ‚âÉ Œ£ (X : C) (Y : C), (X ‚âÖ Y) where
  toFun F := ‚ü®F.obj zero, F.obj one, toIso F‚ü©
  invFun p := fromIso p.2.2
  right_inv := fun ‚ü®X, Y, e‚ü© ‚Ü¶ rfl
  left_inv F := by
    apply Functor.hext
    ¬∑ intro i; cases i <;> rfl
    ¬∑ intro i j
      simp only [fromIso, toIso]
      cases i <;> cases j <;> intro ‚ü®‚ü© <;> simp only [heq_eq_eq] <;> rw [‚Üê F.map_id] <;> rfl

end

def coev (i : WalkingIso) : Fin 1 ‚•§ WalkingIso := ComposableArrows.mk‚ÇÄ i

end WalkingIso

end CategoryTheory

namespace SSet

def coherentIso : SSet.{u} := nerve WalkingIso
namespace coherentIso

open Simplicial SimplicialCategory SSet SimplexCategory Truncated Functor

def pt (i : WalkingIso) : Œî[0] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm (WalkingIso.coev i)

def oneSimplex (X‚ÇÄ X‚ÇÅ : WalkingIso) : Œî[1] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm
    (ComposableArrows.mk‚ÇÅ (X‚ÇÄ := X‚ÇÄ) (X‚ÇÅ := X‚ÇÅ) ‚ü®‚ü©)

theorem oneSimplex_ext {X‚ÇÄ X‚ÇÅ Y‚ÇÄ Y‚ÇÅ : WalkingIso} (e‚ÇÄ : X‚ÇÄ = Y‚ÇÄ) (e‚ÇÅ : X‚ÇÅ = Y‚ÇÅ) :
    oneSimplex X‚ÇÄ X‚ÇÅ = oneSimplex Y‚ÇÄ Y‚ÇÅ :=
  congrArg (yonedaEquiv coherentIso _).symm (ComposableArrows.ext‚ÇÅ e‚ÇÄ e‚ÇÅ rfl)

def twoSimplex (X‚ÇÄ X‚ÇÅ X‚ÇÇ : WalkingIso) : Œî[2] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm
    (ComposableArrows.mk‚ÇÇ (X‚ÇÄ := X‚ÇÄ) (X‚ÇÅ := X‚ÇÅ) (X‚ÇÇ := X‚ÇÇ) ‚ü®‚ü© ‚ü®‚ü©)

theorem oneSimplex_const (X‚ÇÄ : WalkingIso) :
    oneSimplex X‚ÇÄ X‚ÇÄ = stdSimplex.map ([1].const [0] 0) ‚â´ pt X‚ÇÄ := by
  unfold oneSimplex pt
  sorry

theorem twoSimplex_Œ¥0 (X‚ÇÄ X‚ÇÅ X‚ÇÇ : WalkingIso) :
    stdSimplex.Œ¥ 0 ‚â´ twoSimplex X‚ÇÄ X‚ÇÅ X‚ÇÇ = oneSimplex X‚ÇÅ X‚ÇÇ := rfl

theorem twoSimplex_Œ¥1 (X‚ÇÄ X‚ÇÅ X‚ÇÇ : WalkingIso) :
    stdSimplex.Œ¥ 1 ‚â´ twoSimplex X‚ÇÄ X‚ÇÅ X‚ÇÇ = oneSimplex X‚ÇÄ X‚ÇÇ := by
  unfold twoSimplex oneSimplex
  sorry

theorem twoSimplex_Œ¥2 (X‚ÇÄ X‚ÇÅ X‚ÇÇ : WalkingIso) :
    stdSimplex.Œ¥ 2 ‚â´ twoSimplex X‚ÇÄ X‚ÇÅ X‚ÇÇ = oneSimplex X‚ÇÄ X‚ÇÅ := by
  unfold twoSimplex oneSimplex
  sorry



theorem twoSimplex_ext {X‚ÇÄ X‚ÇÅ X‚ÇÇ Y‚ÇÄ Y‚ÇÅ Y‚ÇÇ : WalkingIso}
    (e‚ÇÄ : X‚ÇÄ = Y‚ÇÄ) (e‚ÇÅ : X‚ÇÅ = Y‚ÇÅ) (e‚ÇÇ : X‚ÇÇ = Y‚ÇÇ) : twoSimplex X‚ÇÄ X‚ÇÅ X‚ÇÇ = twoSimplex Y‚ÇÄ Y‚ÇÅ Y‚ÇÇ :=
  congrArg (yonedaEquiv coherentIso _).symm (ComposableArrows.ext‚ÇÇ e‚ÇÄ e‚ÇÅ e‚ÇÇ rfl rfl)

def hom : Œî[1] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm
    (ComposableArrows.mk‚ÇÅ (X‚ÇÄ := WalkingIso.zero) (X‚ÇÅ := WalkingIso.one) ‚ü®‚ü©)

def inv : Œî[1] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm
    (ComposableArrows.mk‚ÇÅ (X‚ÇÄ := WalkingIso.one) (X‚ÇÅ := WalkingIso.zero) ‚ü®‚ü©)

def homInvId : Œî[2] ‚ü∂ coherentIso :=
  (yonedaEquiv coherentIso _).symm
    (ComposableArrows.mk‚ÇÇ
      (X‚ÇÄ := WalkingIso.zero) (X‚ÇÅ := WalkingIso.one) (X‚ÇÇ := WalkingIso.zero) ‚ü®‚ü© ‚ü®‚ü©)

noncomputable def isPointwiseRightKanExtensionAt (n : ‚Ñï) :
    (rightExtensionInclusion coherentIso 0).IsPointwiseRightKanExtensionAt ‚ü®[n]‚ü© where
  lift s x := sorry
  fac s j := sorry
  uniq s m hm := sorry

noncomputable def isPointwiseRightKanExtension :
    (rightExtensionInclusion coherentIso 0).IsPointwiseRightKanExtension :=
  fun Œî => isPointwiseRightKanExtensionAt Œî.unop.len

theorem isRightKanExtension :
    coherentIso.IsRightKanExtension (ùüô ((Truncated.inclusion 0).op ‚ãô coherentIso)) :=
  RightExtension.IsPointwiseRightKanExtension.isRightKanExtension
    isPointwiseRightKanExtension

theorem is0Coskeletal : SimplicialObject.IsCoskeletal (n := 0) (coherentIso) where
  isRightKanExtension := isRightKanExtension

def simplex {n : ‚Ñï} (obj : Fin n ‚Üí WalkingIso) : Œî[n] ‚ü∂ coherentIso := sorry

def simplex_ext {n : ‚Ñï} (obj obj' : Fin n ‚Üí WalkingIso)
  (hyp : (i : Fin n) ‚Üí obj i = obj' i) : coherentIso.simplex obj = coherentIso.simplex obj' := sorry

end coherentIso

end SSet
