/-
Copyright (c) 2024 Johns Hopkins Category Theory Seminar. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johns Hopkins Category Theory Seminar
-/

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.CoherentIso
import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Limits.Shapes.IsTerminal
import Mathlib.AlgebraicTopology.Quasicategory.Basic

universe u v w

namespace SSet

open CategoryTheory Simplicial SimplicialCategory Limits

/-- An interval is a simplicial set equipped with two endpoints.-/
class Interval (I : SSet.{u}) : Type u where
  src : Œî[0] ‚ü∂ I
  tgt : Œî[0] ‚ü∂ I

/-- The interval relevant to the theory of Kan complexes.-/
instance arrowInterval : Interval Œî[1] where
  src := stdSimplex.Œ¥ (n := 0) (1)
  tgt := stdSimplex.Œ¥ (n := 0) (0)

/-- The interval relevant to the theory of quasi-categories. -/
instance isoInterval : Interval coherentIso where
  src := (yonedaEquiv coherentIso [0]).symm (WalkingIso.coev WalkingIso.zero)
  tgt := (yonedaEquiv coherentIso [0]).symm (WalkingIso.coev WalkingIso.one)

open MonoidalCategory
noncomputable def pointIsUnit : Œî[0] ‚âÖ (ùüô_ SSet) :=
  IsTerminal.uniqueUpToIso isTerminalDeltaZero (IsTerminal.ofUnique (ùüô_ SSet))

noncomputable def expUnitNatIso : ihom (ùüô_ SSet) ‚âÖ ùü≠ SSet :=
  (conjugateIsoEquiv (Adjunction.id (C := SSet)) (ihom.adjunction _)
    (leftUnitorNatIso _)).symm

noncomputable def expPointNatIso : ihom Œî[0] ‚âÖ ùü≠ SSet := by
  refine ?_ ‚â™‚â´ expUnitNatIso
  exact {
    hom := MonoidalClosed.pre pointIsUnit.inv
    inv := MonoidalClosed.pre pointIsUnit.hom
    hom_inv_id := by
      rw [‚Üê MonoidalClosed.pre_map, pointIsUnit.hom_inv_id]
      exact MonoidalClosed.pre_id _
    inv_hom_id := by
      rw [‚Üê MonoidalClosed.pre_map, pointIsUnit.inv_hom_id]
      exact MonoidalClosed.pre_id _
  }

noncomputable def expPointIsoSelf (X : SSet) : sHom Œî[0] X ‚âÖ X := expPointNatIso.app X
section

variable {I : SSet.{u}} [Interval I]

noncomputable def pathSpace {I : SSet.{u}} [Interval I] (X : SSet.{u}) : SSet.{u} := sHom I X

open MonoidalClosed

noncomputable def pathSpace.src (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.src).app X ‚â´ X.expPointIsoSelf.hom)

noncomputable def pathSpace.tgt (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.tgt).app X ‚â´ X.expPointIsoSelf.hom)


/-- TODO: Figure out how to allow `I` to be an a different universe from `A` and `B`?-/
structure Homotopy {A B : SSet.{u}} (f g : A ‚ü∂ B) : Type u
    where
  homotopy : A ‚ü∂ sHom I B
  source_eq : homotopy ‚â´ pathSpace.src B = f
  target_eq : homotopy ‚â´ pathSpace.tgt B = g

/-- For the correct interval, this defines a good notion of equivalences for both Kan complexes
and quasi-categories.-/
structure Equiv (A B : SSet.{u}) : Type u where
  toFun : A ‚ü∂ B
  invFun : B ‚ü∂ A
  left_inv : Homotopy (I := I) (toFun ‚â´ invFun) (ùüô A)
  right_inv : Homotopy (I := I) (invFun ‚â´ toFun) (ùüô B)

end

section

open SimplexCategory

variable {A : SSet.{u}} (f g : A _[1])

structure HomotopyL where
  simplex : A _[2]
  Œ¥‚ÇÄ_eq : A.Œ¥ 0 simplex = A.œÉ 0 (A.Œ¥ 0 f)
  Œ¥‚ÇÅ_eq : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÇ_eq : A.Œ¥ 2 simplex = f

structure HomotopyR where
  simplex : A _[2]
  Œ¥‚ÇÄ_eq : A.Œ¥ 0 simplex = f
  Œ¥‚ÇÅ_eq : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÇ_eq : A.Œ¥ 2 simplex = A.œÉ 0 (A.Œ¥ 1 f)

def HomotopicL : Prop :=
    Nonempty (HomotopyL f g)

def HomotopicR : Prop :=
    Nonempty (HomotopyR f g)

def HomotopyL.refl : HomotopyL f f where
  simplex := A.œÉ 1 f
  Œ¥‚ÇÄ_eq := by
    change _ = (A.Œ¥ 0 ‚â´ A.œÉ 0) _
    rw [‚Üê A.Œ¥_comp_œÉ_of_le (by simp)]; simp
  Œ¥‚ÇÅ_eq := by
    change (A.œÉ 1 ‚â´ A.Œ¥ 1) _ = _
    rw [A.Œ¥_comp_œÉ_self' (by simp)]; simp
  Œ¥‚ÇÇ_eq := by
    change (A.œÉ 1 ‚â´ A.Œ¥ 2) _ = _
    rw [A.Œ¥_comp_œÉ_succ' (by simp)]
    rfl

variable [A.Quasicategory]

-- need a better name
noncomputable def HomotopyL.ofHomotopyLOfHomotopyL {f g h : A _[1]}
  (H‚ÇÅ : HomotopyL f g) (H‚ÇÇ : HomotopyL f h) :
    HomotopyL g h := by
  let œÉ : Œõ[3, 1] ‚ü∂ A := sorry
  let œÑ : A _[3] := sorry
    -- BUILD FAILS:
    -- A.yonedaEquiv _ (Classical.choose $ Quasicategory.hornFilling
    --   (by simp) (by simp [Fin.lt_iff_val_lt_val]) œÉ)
  have œÑ‚ÇÄ : A.Œ¥ 0 œÑ = (A.Œ¥ 0 ‚â´ A.œÉ 0‚â´ A.œÉ 0) g := sorry
  have œÑ‚ÇÇ : A.Œ¥ 2 œÑ = H‚ÇÇ.simplex := sorry
  have œÑ‚ÇÉ : A.Œ¥ 3 œÑ = H‚ÇÅ.simplex := sorry
  use A.Œ¥ 1 œÑ
  . change (A.Œ¥ 1 ‚â´ A.Œ¥ 0) _ = _
    rw [A.Œ¥_comp_Œ¥' (by simp)]; simp [œÑ‚ÇÄ]
    change (A.œÉ 0 ‚â´ A.Œ¥ 0) _ = _
    rw [A.Œ¥_comp_œÉ_self' (by simp)]; simp
  . rw [‚Üê H‚ÇÇ.Œ¥‚ÇÅ_eq, ‚Üê œÑ‚ÇÇ]
    change _ = (A.Œ¥ 2 ‚â´ A.Œ¥ 1) _
    rw [A.Œ¥_comp_Œ¥' (by simp)]; rfl
  . rw [‚Üê H‚ÇÅ.Œ¥‚ÇÅ_eq, ‚Üê œÑ‚ÇÉ]
    change _ = (A.Œ¥ 3 ‚â´ A.Œ¥ 1) _
    rw [A.Œ¥_comp_Œ¥' (by simp)]; rfl

lemma HomotopyL.equiv :
    Equivalence (fun f g : A _[1] ‚Ü¶ HomotopicL f g) where
  refl f := ‚ü®HomotopyL.refl f‚ü©
  symm := by
    intro f g ‚ü®H‚ü©
    exact ‚ü®H.ofHomotopyLOfHomotopyL (HomotopyL.refl f)‚ü©
  trans := by
    intro f g h ‚ü®H‚ÇÅ‚ü© ‚ü®H‚ÇÇ‚ü©
    exact ‚ü®(H‚ÇÅ.ofHomotopyLOfHomotopyL (HomotopyL.refl f)).ofHomotopyLOfHomotopyL H‚ÇÇ‚ü©

lemma homotopicL_iff_homotopicR [Quasicategory A] :
    HomotopicL f g ‚Üî HomotopicR f g := sorry

lemma HomotopyR.equiv :
    Equivalence (fun f g : A _[1] ‚Ü¶ HomotopicR f g) := by
  simp [‚Üê homotopicL_iff_homotopicR, HomotopyL.equiv]

end

end SSet
