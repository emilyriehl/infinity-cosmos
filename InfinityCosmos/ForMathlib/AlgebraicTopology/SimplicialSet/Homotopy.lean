/-
Copyright (c) 2024 Johns Hopkins Category Theory Seminar. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johns Hopkins Category Theory Seminar
-/

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.CoherentIso
import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Limits.Shapes.IsTerminal
import Mathlib.AlgebraicTopology.Quasicategory.Basic
import Mathlib.AlgebraicTopology.SimplicialSet.NerveAdjunction

universe u v w

namespace SSet

open CategoryTheory Simplicial SimplicialCategory Limits

/-- An interval is a simplicial set equipped with two endpoints.-/
class Interval (I : SSet.{u}) : Type u where
  src : Œî[0] ‚ü∂ I
  tgt : Œî[0] ‚ü∂ I

/-- The interval relevant to the theory of Kan complexes.-/
instance arrowInterval : Interval Œî[1] where
  src := stdSimplex.Œ¥ (n := 0) (1)
  tgt := stdSimplex.Œ¥ (n := 0) (0)

/-- The interval relevant to the theory of quasi-categories. -/
instance isoInterval : Interval coherentIso where
  src := coherentIso.pt WalkingIso.zero
  tgt := coherentIso.pt WalkingIso.one

open MonoidalCategory
noncomputable def pointIsUnit : Œî[0] ‚âÖ (ùüô_ SSet) :=
  IsTerminal.uniqueUpToIso isTerminalDeltaZero (IsTerminal.ofUnique (ùüô_ SSet))

noncomputable def expUnitNatIso : ihom (ùüô_ SSet) ‚âÖ ùü≠ SSet :=
  MonoidalClosed.unitNatIso.symm

noncomputable def expPointNatIso : ihom Œî[0] ‚âÖ ùü≠ SSet := by
  refine ?_ ‚â™‚â´ expUnitNatIso
  exact {
    hom := MonoidalClosed.pre pointIsUnit.inv
    inv := MonoidalClosed.pre pointIsUnit.hom
    hom_inv_id := by
      rw [‚Üê MonoidalClosed.pre_map, pointIsUnit.hom_inv_id]
      exact MonoidalClosed.pre_id _
    inv_hom_id := by
      rw [‚Üê MonoidalClosed.pre_map, pointIsUnit.inv_hom_id]
      exact MonoidalClosed.pre_id _
  }

noncomputable def expPointIsoSelf (X : SSet) : sHom Œî[0] X ‚âÖ X := expPointNatIso.app X
section

variable {I : SSet.{u}} [Interval I]

noncomputable def pathSpace {I : SSet.{u}} [Interval I] (X : SSet.{u}) : SSet.{u} := sHom I X

open MonoidalClosed

noncomputable def pathSpace.src (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.src).app X ‚â´ X.expPointIsoSelf.hom)

noncomputable def pathSpace.tgt (X : SSet.{u}) : pathSpace (I := I) X ‚ü∂ X :=
  ((MonoidalClosed.pre Interval.tgt).app X ‚â´ X.expPointIsoSelf.hom)

lemma curry_snd_unitNatIso_inv_app {X Y : SSet.{u}} (f : X ‚ü∂ Y) :
    curry (CartesianMonoidalCategory.snd (ùüô_ SSet) X ‚â´ f) ‚â´ unitNatIso.inv.app Y = f := by
  rw [‚Üê Iso.app_inv, Iso.comp_inv_eq, Iso.app_hom, unitNatIso]
  simp only [Functor.id_obj, conjugateIsoEquiv_apply_hom, conjugateEquiv_apply_app,
    curriedTensor_obj_obj, ihom.ihom_adjunction_unit, leftUnitorNatIso_hom_app,
    ihom.coev_naturality_assoc, id_whiskerLeft, Functor.map_comp, Category.assoc,
    Iso.map_inv_hom_id_assoc]
  rfl

lemma pathSpace.curry_snd_src {A B : SSet.{u}} (f : A ‚ü∂ B) :
    curry (CartesianMonoidalCategory.snd I A ‚â´ f) ‚â´ src B = f := by
  rw [pathSpace.src, curry_pre_app_assoc, CartesianMonoidalCategory.whiskerRight_snd_assoc,
    expPointIsoSelf, Iso.app_hom, expPointNatIso]
  simp only [Iso.trans_hom, NatTrans.comp_app, Functor.id_obj, curry_pre_app_assoc,
    CartesianMonoidalCategory.whiskerRight_snd_assoc]
  rw [expUnitNatIso, Iso.symm_hom, curry_snd_unitNatIso_inv_app f]

lemma pathSpace.curry_snd_tgt {A B : SSet.{u}} (f : A ‚ü∂ B) :
    curry (CartesianMonoidalCategory.snd I A ‚â´ f) ‚â´ tgt B = f := by
  rw [pathSpace.tgt, curry_pre_app_assoc, CartesianMonoidalCategory.whiskerRight_snd_assoc,
    expPointIsoSelf, Iso.app_hom, expPointNatIso]
  simp only [Iso.trans_hom, NatTrans.comp_app, Functor.id_obj, curry_pre_app_assoc,
    CartesianMonoidalCategory.whiskerRight_snd_assoc]
  rw [expUnitNatIso, Iso.symm_hom, curry_snd_unitNatIso_inv_app f]

/-- TODO: Figure out how to allow `I` to be an a different universe from `A` and `B`?-/
structure Homotopy {A B : SSet.{u}} (f g : A ‚ü∂ B) : Type u
    where
  homotopy : A ‚ü∂ sHom I B
  source_eq : homotopy ‚â´ pathSpace.src B = f
  target_eq : homotopy ‚â´ pathSpace.tgt B = g

@[refl]
noncomputable def Homotopy.refl {A B : SSet.{u}} (f : A ‚ü∂ B) : Homotopy (I := I) f f where
  homotopy := curry <| CartesianMonoidalCategory.snd I A ‚â´ f
  source_eq := pathSpace.curry_snd_src f
  target_eq := pathSpace.curry_snd_tgt f

def Homotopy.hoFunctorIso {A B : SSet.{u}} {f g : A ‚ü∂ B} (h : Homotopy (I := I) f g) :
    hoFunctor.map f ‚âÖ hoFunctor.map g := by
  dsimp [hoFunctor]
  simp_rw [‚Üê h.source_eq, ‚Üê h.target_eq]
  simp only [Functor.map_comp]
  -- Jo√´l: You should probably use NatIso.ofComponents: for each 0-simplex, the homotopy gives a
  -- "double-sided path" between the images by both f and g (which should give an iso in the
  -- homotopy category), and then you need to check it is natural.
  sorry

/-- For the correct interval, this defines a good notion of equivalences for both Kan complexes and quasi-categories.-/
structure Equiv (A B : SSet.{u}) : Type u where
  toFun : A ‚ü∂ B
  invFun : B ‚ü∂ A
  left_inv : Homotopy (I := I) (toFun ‚â´ invFun) (ùüô A)
  right_inv : Homotopy (I := I) (invFun ‚â´ toFun) (ùüô B)

@[refl]
noncomputable def Equiv.refl {A : SSet} : Equiv (I := I) A A :=
  ‚ü®ùüô A, ùüô A, Category.comp_id (ùüô A) ‚ñ∏ Homotopy.refl _, Category.comp_id (ùüô A) ‚ñ∏ Homotopy.refl _‚ü©

@[symm]
def Equiv.symm {A B : SSet.{u}} (e : Equiv (I := I) A B) : Equiv (I := I) B A :=
  ‚ü®e.invFun, e.toFun, e.right_inv, e.left_inv‚ü©

end

end SSet

namespace Kan

open SSet Simplicial

/-- Equivalence of Kan Complexes. -/
def Equiv (A B : SSet.{u}) [KanComplex A] [KanComplex B] :=
    SSet.Equiv (I := Œî[1]) A B

end Kan

namespace QCat

open SSet

/-- Equivalence of quasi-categories. -/
def Equiv (A B : SSet.{u}) [Quasicategory A] [Quasicategory B] :=
    SSet.Equiv (I := coherentIso) A B

end QCat


namespace SSet
section

open CategoryTheory Simplicial SimplexCategory

variable {A : SSet.{u}} (f g : A _‚¶ã1‚¶å)

structure HomotopyL where
  simplex : A _‚¶ã2‚¶å
  Œ¥‚ÇÄ_eq : A.Œ¥ 0 simplex = A.œÉ 0 (A.Œ¥ 0 f)
  Œ¥‚ÇÅ_eq : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÇ_eq : A.Œ¥ 2 simplex = f

structure HomotopyR where
  simplex : A _‚¶ã2‚¶å
  Œ¥‚ÇÄ_eq : A.Œ¥ 0 simplex = f
  Œ¥‚ÇÅ_eq : A.Œ¥ 1 simplex = g
  Œ¥‚ÇÇ_eq : A.Œ¥ 2 simplex = A.œÉ 0 (A.Œ¥ 1 f)

def HomotopicL : Prop :=
    Nonempty (HomotopyL f g)

def HomotopicR : Prop :=
    Nonempty (HomotopyR f g)

def HomotopyL.refl : HomotopyL f f where
  simplex := A.œÉ 1 f
  Œ¥‚ÇÄ_eq := by
    change _ = (A.Œ¥ 0 ‚â´ A.œÉ 0) _
    rw [‚Üê A.Œ¥_comp_œÉ_of_le (by simp)]; simp
  Œ¥‚ÇÅ_eq := by
    change (A.œÉ 1 ‚â´ A.Œ¥ 1) _ = _
    rw [A.Œ¥_comp_œÉ_self' (by simp)]; simp
  Œ¥‚ÇÇ_eq := by
    change (A.œÉ 1 ‚â´ A.Œ¥ 2) _ = _
    rw [A.Œ¥_comp_œÉ_succ' (by simp)]
    rfl

-- -- need a better name
-- noncomputable def HomotopyL.ofHomotopyLOfHomotopyL {f g h : A _‚¶ã1‚¶å}
--   (H‚ÇÅ : HomotopyL f g) (H‚ÇÇ : HomotopyL f h) :
--     HomotopyL g h := by
--   let œÉ : (Œõ[3, 1] : SSet.{u}) ‚ü∂ A := sorry
--   let œÑ : A _‚¶ã3‚¶å := sorry
--     -- BUILD FAILS:
--     -- A.yonedaEquiv _ (Classical.choose $ Quasicategory.hornFilling
--     --   (by simp) (by simp [Fin.lt_iff_val_lt_val]) œÉ)
--   have œÑ‚ÇÄ : A.Œ¥ 0 œÑ = (A.Œ¥ 0 ‚â´ A.œÉ 0‚â´ A.œÉ 0) g := sorry
--   have œÑ‚ÇÇ : A.Œ¥ 2 œÑ = H‚ÇÇ.simplex := sorry
--   have œÑ‚ÇÉ : A.Œ¥ 3 œÑ = H‚ÇÅ.simplex := sorry
--   use A.Œ¥ 1 œÑ
--   . change (A.Œ¥ 1 ‚â´ A.Œ¥ 0) _ = _
--     rw [A.Œ¥_comp_Œ¥' (by simp)]; simp [œÑ‚ÇÄ]
--     change (A.œÉ 0 ‚â´ A.Œ¥ 0) _ = _
--     rw [A.Œ¥_comp_œÉ_self' (by simp)]; simp
--   . rw [‚Üê H‚ÇÇ.Œ¥‚ÇÅ_eq, ‚Üê œÑ‚ÇÇ]
--     change _ = (A.Œ¥ 2 ‚â´ A.Œ¥ 1) _
--     rw [A.Œ¥_comp_Œ¥' (by simp)]; rfl
--   . rw [‚Üê H‚ÇÅ.Œ¥‚ÇÅ_eq, ‚Üê œÑ‚ÇÉ]
--     change _ = (A.Œ¥ 3 ‚â´ A.Œ¥ 1) _
--     rw [A.Œ¥_comp_Œ¥' (by simp)]; rfl

-- lemma HomotopyL.equiv :
--     Equivalence (fun f g : A _‚¶ã1‚¶å ‚Ü¶ HomotopicL f g) where
--   refl f := ‚ü®HomotopyL.refl f‚ü©
--   symm := by
--     intro f g ‚ü®H‚ü©
--     exact ‚ü®H.ofHomotopyLOfHomotopyL (HomotopyL.refl f)‚ü©
--   trans := by
--     intro f g h ‚ü®H‚ÇÅ‚ü© ‚ü®H‚ÇÇ‚ü©
--     exact ‚ü®(H‚ÇÅ.ofHomotopyLOfHomotopyL (HomotopyL.refl f)).ofHomotopyLOfHomotopyL H‚ÇÇ‚ü©

-- lemma homotopicL_iff_homotopicR [Quasicategory A] :
--     HomotopicL f g ‚Üî HomotopicR f g := sorry

-- lemma HomotopyR.equiv [Quasicategory A] :
--     Equivalence (fun f g : A _‚¶ã1‚¶å ‚Ü¶ HomotopicR f g) := by
--   simp [‚Üê homotopicL_iff_homotopicR, HomotopyL.equiv]

end

end SSet

namespace SSet

open CategoryTheory

/-- `hoFunctor` applied to a nerve of a category is isomorphic to that category. -/
noncomputable def hoFunctor_nerve_iso (C : Cat) :
    hoFunctor.obj (nerve C) ‚âÖ C := by
  rw [show nerve C = nerveFunctor.obj C by rfl, ‚Üê Functor.comp_obj]
  exact CategoryTheory.nerveFunctorCompHoFunctorIso.app C

/-- `hoFunctor` applied to `coherentIso` is isomorphic to `WalkingIso`. -/
noncomputable def hoFunctor_coherentIso_equiv :
    hoFunctor.obj coherentIso ‚âÖ Cat.of WalkingIso :=
  hoFunctor_nerve_iso <| Cat.of WalkingIso

def WalkingIso.swap : WalkingIso ‚ü∂ WalkingIso
| WalkingIso.zero => WalkingIso.one
| WalkingIso.one => WalkingIso.zero

def WalkingIso.swapFunctor : WalkingIso ‚•§ WalkingIso where
  obj := WalkingIso.swap
  map := id

def coherentIso.swap : coherentIso ‚ü∂ coherentIso :=
  nerveMap WalkingIso.swapFunctor

@[simp]
lemma src_swap_eq_tgt : Interval.src ‚â´ coherentIso.swap = Interval.tgt :=
  rfl

@[simp]
lemma tgt_swap_eq_src : Interval.tgt ‚â´ coherentIso.swap = Interval.src :=
  rfl

@[symm]
noncomputable def Homotopy.coherentIso_symm {A B : SSet.{u}} {f g : A ‚ü∂ B}
    (h : Homotopy (I := coherentIso) f g) :
    Homotopy (I := coherentIso) g f where
  homotopy := h.homotopy ‚â´ (MonoidalClosed.pre coherentIso.swap).app B
  source_eq := by
    simp_rw [‚Üê h.target_eq, Category.assoc]
    rfl
  target_eq := by
    simp_rw [‚Üê h.source_eq, Category.assoc]
    rfl

/--
`hoFunctor` sends equivalences `Equiv A B` to equivalences of categories `F.obj A ‚âå F.obj B`.
-/
noncomputable def hoFunctor.mapEquiv (A B : SSet.{u}) (f : SSet.Equiv (I := coherentIso) A B) :
    hoFunctor.obj A ‚âå hoFunctor.obj B where
  functor := hoFunctor.map f.toFun
  inverse := hoFunctor.map f.invFun
  unitIso := by
    rw [‚Üê Cat.id_eq_id]
    have :
        hoFunctor.map f.toFun ‚ãô hoFunctor.map f.invFun = hoFunctor.map (f.toFun ‚â´ f.invFun) := by
      rw [Functor.map_comp]
      rfl
    rw [this, ‚Üê hoFunctor.map_id A]
    apply Homotopy.hoFunctorIso (I := coherentIso)
    exact f.left_inv.coherentIso_symm
  counitIso := by
    rw [‚Üê Cat.id_eq_id]
    have :
        hoFunctor.map f.invFun ‚ãô hoFunctor.map f.toFun = hoFunctor.map (f.invFun ‚â´ f.toFun) := by
      rw [Functor.map_comp]
      rfl
    rw [this, ‚Üê hoFunctor.map_id B]
    apply Homotopy.hoFunctorIso (I := coherentIso)
    exact f.right_inv
  functor_unitIso_comp := sorry

end SSet
