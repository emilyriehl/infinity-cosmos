import Mathlib.AlgebraicTopology.SimplicialSet.Path
import Mathlib.AlgebraicTopology.Quasicategory.Basic

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplexCategory
import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.Horn

open Simplicial SimplexCategory
open CategoryTheory SimplexCategory.Truncated Truncated.Hom SimplicialObject
open SimplicialObject.Truncated

-- TODO should these go into the SimplexCategory.Basics file?
namespace SimplexCategory

lemma mkOfSucc_2_0 : @mkOfSucc 2 0 = Œ¥ 2 := by ext i; fin_cases i <;> rfl
lemma mkOfSucc_2_1 : @mkOfSucc 2 1 = Œ¥ 0 := by ext i; fin_cases i <;> rfl

end SimplexCategory

namespace SSet
namespace Truncated

namespace fill31

/-- Given a path `f` of length 3 in a 2-truncated simplicial set `X`, this
is the combinatorial data of three 2-simplices of `X` from which one can define a horn
Œõ[3, 1] ‚Üí X such that the spine of this horn is `f`.
-/
structure horn_data {X : Truncated 2} (f : X.Path 3) where
  œÉ‚ÇÉ : X _‚¶ã2‚¶å‚ÇÇ
  œÉ‚ÇÄ : X _‚¶ã2‚¶å‚ÇÇ
  œÉ‚ÇÇ : X _‚¶ã2‚¶å‚ÇÇ
  h‚ÇÉ : spine X 2 _ œÉ‚ÇÉ = f.interval 0 2
  h‚ÇÄ : spine X 2 _ œÉ‚ÇÄ = f.interval 1 2
  h‚ÇÇ‚ÇÇ : X.map (tr (Œ¥ 2)).op œÉ‚ÇÇ = f.arrow 0
  h‚ÇÇ‚ÇÄ : X.map (tr (Œ¥ 0)).op œÉ‚ÇÇ = X.map (tr (Œ¥ 1)).op œÉ‚ÇÄ

/--
Given a path `f` of length 3 in a 2-truncated simplicial set `X` and
horn_data `a`, `filling_simplex a œÉ` is the proposition that `œÉ` is a 2-simplex
that "fills in" the missing face of the horn defined by `a`. This is the (3, 1)-filling property.
-/
structure filling_simplex {X : Truncated 2} {f : X.Path 3} (a : horn_data f) (œÉ : X _‚¶ã2‚¶å‚ÇÇ) : Prop where
  edge‚ÇÄ : X.map (tr (Œ¥ 0)).op œÉ = f.arrow 2
  edge‚ÇÅ : X.map (tr (Œ¥ 1)).op œÉ = X.map (tr (Œ¥ 1)).op a.œÉ‚ÇÇ
  edge‚ÇÇ : X.map (tr (Œ¥ 2)).op œÉ = X.map (tr (Œ¥ 1)).op a.œÉ‚ÇÉ

end fill31

namespace fill32

/-- Given a path `f` of length 3 in a 2-truncated simplicial set `X`, this
is the combinatorial data of three 2-simplices of `X` from which one can define a horn
Œõ[3, 1] ‚Üí X such that the spine of this horn is `f`.
-/
structure horn_data {X : Truncated 2} (f : X.Path 3) where
  œÉ‚ÇÉ : X _‚¶ã2‚¶å‚ÇÇ
  œÉ‚ÇÄ : X _‚¶ã2‚¶å‚ÇÇ
  œÉ‚ÇÅ : X _‚¶ã2‚¶å‚ÇÇ
  h‚ÇÉ : spine X 2 _ œÉ‚ÇÉ = f.interval 0 2
  h‚ÇÄ : spine X 2 _ œÉ‚ÇÄ = f.interval 1 2
  h‚ÇÅ‚ÇÇ : X.map (tr (Œ¥ 2)).op œÉ‚ÇÅ = X.map (tr (Œ¥ 1)).op œÉ‚ÇÉ
  h‚ÇÅ‚ÇÄ : X.map (tr (Œ¥ 0)).op œÉ‚ÇÅ = f.arrow 2

/--
Given a path `f` of length 3 in a 2-truncated simplicial set `X` and
horn_data `a`, `filling_simplex a œÉ` is the proposition that `œÉ` is a 2-simplex
that "fills in" the missing face of the horn defined by `a`. This is the (3, 1)-filling property.
-/
structure filling_simplex {X : Truncated 2} {f : X.Path 3} (a : horn_data f) (œÉ : X _‚¶ã2‚¶å‚ÇÇ) : Prop where
  edge‚ÇÄ : X.map (tr (Œ¥ 0)).op œÉ = X.map (tr (Œ¥ 1)).op a.œÉ‚ÇÄ
  edge‚ÇÅ : X.map (tr (Œ¥ 1)).op œÉ = X.map (tr (Œ¥ 1)).op a.œÉ‚ÇÅ
  edge‚ÇÇ : X.map (tr (Œ¥ 2)).op œÉ = f.arrow 0
end fill32

/--
A 2-truncated quasicategory is a 2-truncated simplicial set with 3 properties:
  (2, 1)-filling
  (3, 1)-filling
  (3, 2)-filling
See `fill31.horn_data` and `fill31.filling_simplex` for the details of (3, 1)-filling,
and `fill32.horn_data` and `fill32.filling_simplex` for the details of (3, 2)-filling.
-/
structure Quasicategory‚ÇÇ (X : Truncated 2) where
  fill21 (f : Path X 2) : ‚àÉ (œÉ : X _‚¶ã2‚¶å‚ÇÇ), spine X 2 _ œÉ = f
  fill31 {f : Path X 3} (a : fill31.horn_data f) : ‚àÉ œÉ‚ÇÅ : X _‚¶ã2‚¶å‚ÇÇ, fill31.filling_simplex a œÉ‚ÇÅ
  fill32 {f : Path X 3} (a : fill32.horn_data f) : ‚àÉ œÉ‚ÇÅ : X _‚¶ã2‚¶å‚ÇÇ, fill32.filling_simplex a œÉ‚ÇÅ

end Truncated

-- TODO: this section contains 3 lemmas moving application of yonedaEquiv around.
-- some of these might be already in the library under a different name,
-- and the proofs could probably be greatly simplified
section aux_lemmas

lemma map_yonedaEquiv {n m : ‚Ñï} {X : SSet} (f : .mk n ‚ü∂ .mk m) (g : Œî[m] ‚ü∂ X) :
    X.map f.op (yonedaEquiv g) = g.app (Opposite.op (mk n)) (stdSimplex.objEquiv.symm f) := by
  have : yonedaEquiv g = g.app (Opposite.op (mk m)) (stdSimplex.objEquiv.symm (ùüô _)) := rfl
  rw [this]
  have : X.map f.op (g.app (Opposite.op (mk m)) (stdSimplex.objEquiv.symm (ùüô _))) =
    (g.app (Opposite.op (mk m)) ‚â´ X.map f.op) (stdSimplex.objEquiv.symm (ùüô _)) := rfl
  rw [‚Üê g.naturality] at this
  rw [this]
  -- TODO stdSimplex.map_id is probably helpful here
  have : Œî[m].map f.op (stdSimplex.objEquiv.symm (ùüô _)) = stdSimplex.objEquiv.symm f := by aesop_cat
  dsimp
  rw [this]
  rfl

lemma push_yonedaEquiv {n m k : ‚Ñï} {X : SSet} (f : .mk n ‚ü∂ .mk m)
    (œÉ : X.obj (Opposite.op (.mk m))) {s : .mk m ‚ü∂ .mk k} {g : Œî[k] ‚ü∂ X}
    (h : yonedaEquiv.symm œÉ = stdSimplex.map s ‚â´ g) :
    X.map f.op œÉ = X.map (f ‚â´ s).op (yonedaEquiv g) := by
  rw [‚Üê Equiv.apply_symm_apply yonedaEquiv œÉ, h]
  have : yonedaEquiv (stdSimplex.map s ‚â´ g) = X.map s.op (yonedaEquiv g) := by
    rw [yonedaEquiv_comp, map_yonedaEquiv, stdSimplex.yonedaEquiv_map]
  rw [this, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]

lemma map_comp_yonedaEquiv_symm {n m : ‚Ñï} {X : SSet} (f : .mk n ‚ü∂ .mk m)
    (s : X.obj (.op (.mk m))) :
    stdSimplex.map f ‚â´ yonedaEquiv.symm s = yonedaEquiv.symm (X.map f.op s) := by
  apply yonedaEquiv.apply_eq_iff_eq_symm_apply.1
  let s' := yonedaEquiv.symm s
  have : s = yonedaEquiv s' := (Equiv.symm_apply_eq yonedaEquiv).mp rfl
  rw [this, map_yonedaEquiv, yonedaEquiv_comp, Equiv.apply_symm_apply yonedaEquiv _,
    stdSimplex.yonedaEquiv_map]

end aux_lemmas

section horn_from_horn_data21
open SimplexCategory
open horn‚ÇÇ‚ÇÅ
namespace horn‚ÇÇ‚ÇÅ

abbrev pathEdge‚ÇÄ {X : SSet} (f : Path X 2) : Œî[1] ‚ü∂ X := yonedaEquiv.symm (f.arrow 0)
abbrev pathEdge‚ÇÅ {X : SSet} (f : Path X 2) : Œî[1] ‚ü∂ X := yonedaEquiv.symm (f.arrow 1)

def path_edges_comm {X : SSet} {f : SSet.Path X 2} : pt‚ÇÅ ‚â´ pathEdge‚ÇÅ f = pt‚ÇÄ ‚â´ pathEdge‚ÇÄ f := by
  rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm, f.arrow_src 1, f.arrow_tgt 0]; rfl

/-- Given a path of length 2 in the 2-truncation of a simplicial set `X`, construct
the obvious map Œõ[2, 1] ‚Üí X using that Œõ[2, 1] is a pushout
-/
def horn_from_path {X : SSet} (f : ((truncation 2).obj X).Path 2) : Œõ[2, 1].toSSet ‚ü∂ X :=
  Limits.PushoutCocone.IsColimit.desc horn_is_pushout (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

-- the following lemmas stem from the universal property of the horn pushout
lemma pushout_up0 {X : SSet} (f : ((truncation 2).obj X).Path 2) :
    hornTwo_edge‚ÇÄ ‚â´ horn_from_path f = yonedaEquiv.symm (f.arrow 1) :=
  Limits.PushoutCocone.IsColimit.inl_desc horn_is_pushout
    (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

lemma pushout_up1 {X : SSet} (f : ((truncation 2).obj X).Path 2) :
    hornTwo_edge‚ÇÇ ‚â´ horn_from_path f = yonedaEquiv.symm (f.arrow 0) :=
  Limits.PushoutCocone.IsColimit.inr_desc horn_is_pushout
    (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

end horn‚ÇÇ‚ÇÅ
end horn_from_horn_data21

section horn_from_horn_data31
open SSet.horn‚ÇÉ‚ÇÅ
namespace horn‚ÇÉ‚ÇÅ

variable {X : SSet} {f : ((truncation 2).obj X).Path 3}
variable (horn_data : Truncated.fill31.horn_data f)

def œÄ2 (a : horn‚ÇÉ‚ÇÅ.R) : (Œî[2] ‚ü∂ X) := match a with
  | ‚ü®0, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÄ
  | ‚ü®1, h‚ü© => by contradiction
  | ‚ü®2, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÇ
  | ‚ü®3, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÉ

-- The multicofork ‚®ø Œî[1] ‚áâ ‚®ø Œî[2] ‚Üí X defined by sending Œî[2]s to
-- each of the three simplices in the combinatorial `horn_data`
def multicofork_from_data : Limits.Multicofork multispan_index
    := Limits.Multicofork.ofœÄ multispan_index X
      (œÄ2 horn_data)
      (by
      rintro ‚ü®‚ü®‚ü®i, hi‚ü©, ‚ü®j, hj‚ü©‚ü©, hij‚ü©
      fin_cases i <;> fin_cases j <;> try contradiction
      all_goals
        dsimp only [J, multispan_index, œÄ2, Fin.castSucc, Fin.pred,
          Fin.castAdd, Fin.subNat, Fin.castLE]
        rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm]
        congr 1
      . symm; exact horn_data.h‚ÇÇ‚ÇÄ
      . have : (f.interval 1 2).arrow 0 = (f.interval 0 2).arrow 1 := rfl
        rw [‚Üê horn_data.h‚ÇÉ, ‚Üê horn_data.h‚ÇÄ, Truncated.spine_arrow,
          Truncated.spine_arrow, mkOfSucc_2_0, mkOfSucc_2_1] at this
        exact this
      . have : f.arrow 0 = (f.interval 0 2).arrow 0 := rfl
        rw [‚Üê horn_data.h‚ÇÉ, ‚Üê horn_data.h‚ÇÇ‚ÇÇ, Truncated.spine_arrow, mkOfSucc_2_0] at this
        exact this
    )

-- using the fact that Œõ[3, 1] is the coequalizer gives a map Œõ[3, 1] ‚Üí X
def horn_from_data : Œõ[3, 1].toSSet ‚ü∂ X := Limits.IsColimit.desc horn‚ÇÉ‚ÇÅ.isMulticoeq
  (multicofork_from_data horn_data)

-- some commutations guaranteed by the multicofork diagram
abbrev R‚ÇÄ : horn‚ÇÉ‚ÇÅ.R := ‚ü®0, by omega‚ü©
abbrev R‚ÇÇ : horn‚ÇÉ‚ÇÅ.R := ‚ü®2, by omega‚ü©
abbrev R‚ÇÉ : horn‚ÇÉ‚ÇÅ.R := ‚ü®3, by omega‚ü©

lemma mcofork_up0 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÄ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÄ :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÄ)

lemma mcofork_up2 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÇ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÇ :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÇ)

lemma mcofork_up3 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÉ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÉ :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÉ)

/-- Given a 3-simplex `g : Œî[3] ‚Üí X` extending the map `horn_data : Œõ[3, 1].toSSet ‚Üí X` along
the inclusion Œõ[3, 1] ‚Üí Œî[3], there exists a 2-simplex satisfying the (3, 1)-filling property
(namely, `yonedaEquiv g`).
-/
def fill31_from_horn_extension (g : Œî[3] ‚ü∂ X) (h : horn_from_data horn_data = Œõ[3, 1].Œπ ‚â´ g) :
  ‚àÉ œÉ : ((truncation 2).obj X) _‚¶ã2‚¶å‚ÇÇ, Truncated.fill31.filling_simplex horn_data œÉ := by
  let œÉ := X.map (Œ¥ 1).op (yonedaEquiv g)
  use œÉ
  exact {
    edge‚ÇÄ := by
      have arr : f.arrow 2 = (f.interval 1 2).arrow 1 := rfl
      rw [arr, ‚Üê horn_data.h‚ÇÄ, Truncated.spine_arrow, mkOfSucc_2_1]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj, len_mk,
        id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj, Nat.reduceAdd,
        Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      have : yonedaEquiv.symm horn_data.œÉ‚ÇÄ = stdSimplex.Œ¥ 0 ‚â´ g
          := by rw [‚Üê mcofork_up0 horn_data, h, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÄ]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÄ this]
      rfl
    edge‚ÇÅ := by
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj, len_mk,
        id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj, Nat.reduceAdd,
        Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      have : yonedaEquiv.symm horn_data.œÉ‚ÇÇ = stdSimplex.Œ¥ 2 ‚â´ g
          := by rw [‚Üê mcofork_up2 horn_data, h, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÇ]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÇ this]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      symm; exact @Œ¥_comp_Œ¥ 1 1 1 (by norm_num)
    edge‚ÇÇ := by
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj, len_mk,
        id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj, Nat.reduceAdd,
        Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      have : yonedaEquiv.symm horn_data.œÉ‚ÇÉ = stdSimplex.Œ¥ 3 ‚â´ g
          := by rw [‚Üê mcofork_up3 horn_data, h, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÉ]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÉ this]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      symm; exact @Œ¥_comp_Œ¥ 1 1 2 (by apply Fin.le_iff_val_le_val.2; norm_num)
  }
end horn‚ÇÉ‚ÇÅ
end horn_from_horn_data31

/- define the structures Edge and CompStruct for a 2-truncated simplicial set `X : Truncated 2`
  and vertices `x‚ÇÄ`, ..., `x‚ÇÉ`
-/
section comp_struct
variable {X : Truncated 2}
variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : X _‚¶ã0‚¶å‚ÇÇ}

structure Edge (x‚ÇÄ : X _‚¶ã0‚¶å‚ÇÇ) (x‚ÇÅ : X _‚¶ã0‚¶å‚ÇÇ) where
  simplex : X _‚¶ã1‚¶å‚ÇÇ
  h‚ÇÄ : X.map (tr (Œ¥ 1)).op simplex = x‚ÇÄ
  h‚ÇÅ : X.map (tr (Œ¥ 0)).op simplex = x‚ÇÅ

structure CompStruct (e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) (e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ) where
simplex : X _‚¶ã2‚¶å‚ÇÇ
h‚ÇÄ‚ÇÅ : X.map (tr (Œ¥ 2)).op simplex = e‚ÇÄ‚ÇÅ.simplex
h‚ÇÅ‚ÇÇ : X.map (tr (Œ¥ 0)).op simplex = e‚ÇÅ‚ÇÇ.simplex
h‚ÇÄ‚ÇÇ : X.map (tr (Œ¥ 1)).op simplex = e‚ÇÄ‚ÇÇ.simplex

end comp_struct

section fill31_comp_struct

variable {S : SSet}
variable
    {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : ((truncation 2).obj S) _‚¶ã0‚¶å‚ÇÇ}
    {e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {e‚ÇÇ‚ÇÉ : Edge x‚ÇÇ x‚ÇÉ}
    {e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} {e‚ÇÅ‚ÇÉ : Edge x‚ÇÅ x‚ÇÉ} {e‚ÇÄ‚ÇÉ : Edge x‚ÇÄ x‚ÇÉ}
    (h‚ÇÄ‚ÇÇ : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ)
    (h‚ÇÅ‚ÇÉ : CompStruct e‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÅ‚ÇÉ)
    (h : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÉ e‚ÇÄ‚ÇÉ)

include S x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÄ‚ÇÇ e‚ÇÅ‚ÇÉ e‚ÇÄ‚ÇÉ h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h
open horn‚ÇÉ‚ÇÅ
#check horn‚ÇÉ‚ÇÅ.multispan_index

/- steps of constructing fill31' from (g : Œî[3] ‚ü∂ X):
  . construct a multicofork from the given CompStructs
  . construct a map h : Œõ[3, 1] ‚ü∂ X such that h = Œõ[3, 1].Œπ ‚â´ g
  . make a CompStruct with simplex given by g, prove equalities
-/
def œÄ' (a : R) : (Œî[2] ‚ü∂ S) := match a with
  | ‚ü®0, _‚ü© => yonedaEquiv.symm h‚ÇÅ‚ÇÉ.simplex
  | ‚ü®1, _‚ü© => by contradiction
  | ‚ü®2, _‚ü© => yonedaEquiv.symm h.simplex
  | ‚ü®3, _‚ü© => yonedaEquiv.symm h‚ÇÄ‚ÇÇ.simplex

-- The multicofork ‚®ø Œî[1] ‚áâ ‚®ø Œî[2] ‚Üí X defined by sending Œî[2]s to
-- each of the three simplices in the combinatorial `horn_data`
def multicofork_from_data : Limits.Multicofork multispan_index :=
  Limits.Multicofork.ofœÄ multispan_index S
    (œÄ' h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h)
    (by
      rintro ‚ü®‚ü®‚ü®i, i_ne_1‚ü©, ‚ü®j, j_ne_1‚ü©‚ü©, i_lt_j‚ü©
      fin_cases i <;> fin_cases j <;> try contradiction
      all_goals
        dsimp [J, multispan_index, œÄ']
        rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm]
        congr 1
      -- rw doesn't work because the statement is about `SSet`, not `Truncated 2`
      . apply Eq.trans
        exact h‚ÇÅ‚ÇÉ.h‚ÇÄ‚ÇÇ
        symm; exact h.h‚ÇÅ‚ÇÇ
      . apply Eq.trans
        exact h‚ÇÅ‚ÇÉ.h‚ÇÄ‚ÇÅ
        symm; exact h‚ÇÄ‚ÇÇ.h‚ÇÅ‚ÇÇ
      . apply Eq.trans
        exact h.h‚ÇÄ‚ÇÅ
        symm; exact h‚ÇÄ‚ÇÇ.h‚ÇÄ‚ÇÅ)

-- using the fact that Œõ[3, 1] is the coequalizer gives a map Œõ[3, 1] ‚Üí X
def horn_from_data : Œõ[3, 1].toSSet ‚ü∂ S := Limits.IsColimit.desc horn‚ÇÉ‚ÇÅ.isMulticoeq
  (multicofork_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h)

-- TODO rename these to something more useful
lemma mcofork_up0 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÄ ‚â´ (horn_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) = yonedaEquiv.symm h‚ÇÅ‚ÇÉ.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) (.right R‚ÇÄ)

lemma mcofork_up2 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÇ ‚â´ (horn_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) = yonedaEquiv.symm h.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) (.right R‚ÇÇ)

lemma mcofork_up3 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÉ ‚â´ (horn_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) = yonedaEquiv.symm h‚ÇÄ‚ÇÇ.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h) (.right R‚ÇÉ)

-- TODO add congruence lemma?
def fill31_from_horn_extension'
    (g : Œî[3] ‚ü∂ S)
    (comm : horn_from_data h‚ÇÄ‚ÇÇ h‚ÇÅ‚ÇÉ h = Œõ[3, 1].Œπ ‚â´ g) :
    Nonempty (CompStruct e‚ÇÄ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÄ‚ÇÉ) := by
  have y0 : yonedaEquiv.symm h‚ÇÅ‚ÇÉ.simplex = stdSimplex.Œ¥ 0 ‚â´ g := by
    rw [‚Üê mcofork_up0, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÄ]
  have y2 : yonedaEquiv.symm h.simplex = stdSimplex.Œ¥ 2 ‚â´ g := by
    rw [‚Üê mcofork_up2, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÇ]
  have y3 : yonedaEquiv.symm h‚ÇÄ‚ÇÇ.simplex = stdSimplex.Œ¥ 3 ‚â´ g := by
    rw [‚Üê mcofork_up3, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÉ]
  apply Nonempty.intro
  exact {
    simplex := S.map (Œ¥ 1).op (yonedaEquiv g)
    h‚ÇÄ‚ÇÅ := by
      rw [‚Üê h‚ÇÄ‚ÇÇ.h‚ÇÄ‚ÇÇ]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y3]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      symm; exact @Œ¥_comp_Œ¥ _ 1 2 (by apply Fin.le_iff_val_le_val.2; norm_num)
    h‚ÇÅ‚ÇÇ := by
      rw [‚Üê h‚ÇÅ‚ÇÉ.h‚ÇÅ‚ÇÇ]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y0]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      exact @Œ¥_comp_Œ¥ _ 0 0 (le_refl 0)
    h‚ÇÄ‚ÇÇ := by
      rw [‚Üê h.h‚ÇÄ‚ÇÇ]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y2]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      symm; exact @Œ¥_comp_Œ¥ _ 1 1 (le_refl 1)
  }

end fill31_comp_struct

section horn_from_horn_data32
open horn‚ÇÉ‚ÇÇ
namespace horn‚ÇÉ‚ÇÇ

variable {X : SSet} {f : ((truncation 2).obj X).Path 3}
variable (horn_data : Truncated.fill32.horn_data f)

def œÄ (a : R) : (Œî[2] ‚ü∂ X) := match a with
  | ‚ü®0, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÄ
  | ‚ü®1, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÅ
  | ‚ü®2, h‚ü© => by contradiction
  | ‚ü®3, h‚ü© => yonedaEquiv.symm horn_data.œÉ‚ÇÉ

-- The multicofork ‚®ø Œî[1] ‚áâ ‚®ø Œî[2] ‚Üí X defined by sending Œî[2]s to
-- each of the three simplices in the combinatorial `horn_data`
def multicofork_from_data : Limits.Multicofork multispan_index :=
  Limits.Multicofork.ofœÄ multispan_index X
    (œÄ horn_data)
    (by
    rintro ‚ü®‚ü®‚ü®i, hi‚ü©, ‚ü®j, hj‚ü©‚ü©, hij‚ü©
    fin_cases i <;> fin_cases j <;> try contradiction
    all_goals
      dsimp only [J, multispan_index, œÄ, Fin.castSucc, Fin.pred,
        Fin.castAdd, Fin.subNat, Fin.castLE]
      rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm]
      congr 1
    . have : (f.interval 1 2).arrow 1 = f.arrow 2 := rfl
      rw [‚Üê horn_data.h‚ÇÄ, ‚Üê horn_data.h‚ÇÅ‚ÇÄ, Truncated.spine_arrow, mkOfSucc_2_1] at this
      exact this
    . have : (f.interval 1 2).arrow 0 = (f.interval 0 2).arrow 1 := rfl
      rw [‚Üê horn_data.h‚ÇÉ, ‚Üê horn_data.h‚ÇÄ, Truncated.spine_arrow,
        Truncated.spine_arrow, mkOfSucc_2_0, mkOfSucc_2_1] at this
      exact this
    . exact horn_data.h‚ÇÅ‚ÇÇ)

-- using the fact that Œõ[3, 2] is the coequalizer gives a map Œõ[3, 2] ‚Üí X
def horn_from_data : Œõ[3, 2].toSSet ‚ü∂ X :=
  Limits.IsColimit.desc isMulticoeq (multicofork_from_data horn_data)

-- some commutations guaranteed by the multicofork diagram
abbrev R‚ÇÄ : R := ‚ü®0, by omega‚ü©
abbrev R‚ÇÅ : R := ‚ü®1, by omega‚ü©
abbrev R‚ÇÉ : R := ‚ü®3, by omega‚ü©

lemma mcofork_up0 : Œπ‚ÇÄ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÄ :=
  isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÄ)

lemma mcofork_up1 : Œπ‚ÇÅ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÅ :=
  isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÅ)

lemma mcofork_up3 : Œπ‚ÇÉ ‚â´ (horn_from_data horn_data) = yonedaEquiv.symm horn_data.œÉ‚ÇÉ :=
  isMulticoeq.fac (multicofork_from_data horn_data) (.right R‚ÇÉ)

/-- Given a 3-simplex `g : Œî[3] ‚Üí X` extending the map `horn_data : Œõ[3, 2].toSSet ‚Üí X` along
the inclusion Œõ[3, 2] ‚Üí Œî[3], there exists a 2-simplex satisfying the (3, 2)-filling property
(namely, `yonedaEquiv g`).
-/
def fill32_from_horn_extension (g : Œî[3] ‚ü∂ X) (h : horn_from_data horn_data = Œõ[3, 2].Œπ ‚â´ g) :
    ‚àÉ œÉ : ((truncation 2).obj X) _‚¶ã2‚¶å‚ÇÇ, Truncated.fill32.filling_simplex horn_data œÉ := by
  let œÉ := X.map (Œ¥ 2).op (yonedaEquiv g)
  use œÉ
  constructor
  <;> dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
      len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj, Nat.reduceAdd,
      Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
      fullSubcategoryInclusion.map]
  . have : yonedaEquiv.symm horn_data.œÉ‚ÇÄ = stdSimplex.Œ¥ 0 ‚â´ g
        := by rw [‚Üê mcofork_up0 horn_data, h, ‚Üê Category.assoc, incl‚ÇÄ]
    rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÄ this]
    apply congr_fun
    apply Prefunctor.congr_map
    apply (Opposite.op_inj_iff _ _).2
    exact @Œ¥_comp_Œ¥ 1 0 1 (Fin.zero_le _)
  . have : yonedaEquiv.symm horn_data.œÉ‚ÇÅ = stdSimplex.Œ¥ 1 ‚â´ g
        := by rw [‚Üê mcofork_up1 horn_data, h, ‚Üê Category.assoc, incl‚ÇÅ]
    rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÅ this]
    apply congr_fun
    apply Prefunctor.congr_map
    apply (Opposite.op_inj_iff _ _).2
    exact @Œ¥_comp_Œ¥ 1 1 1 (Fin.ge_of_eq rfl)
  . have : f.arrow 0 = (f.interval 0 2).arrow 0 := rfl
    rw [‚Üê horn_data.h‚ÇÉ, Truncated.spine_arrow, mkOfSucc_2_0] at this
    rw [this]
    dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
      len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj, Nat.reduceAdd,
      Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
      fullSubcategoryInclusion.map]
    have : yonedaEquiv.symm horn_data.œÉ‚ÇÉ = stdSimplex.Œ¥ 3 ‚â´ g
        := by rw [‚Üê mcofork_up3 horn_data, h, ‚Üê Category.assoc, incl‚ÇÉ]
    rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ horn_data.œÉ‚ÇÉ this]
    apply congr_fun
    apply Prefunctor.congr_map
    apply (Opposite.op_inj_iff _ _).2
    symm; exact @Œ¥_comp_Œ¥ 1 2 2 (Fin.ge_of_eq rfl)

end horn‚ÇÉ‚ÇÇ
end horn_from_horn_data32

def two_truncatation_of_qc_is_2_trunc_qc {X : SSet} [Quasicategory X] :
    Truncated.Quasicategory‚ÇÇ ((truncation 2).obj X) where
  fill21 f := by
    obtain ‚ü®g, h‚ü© := Quasicategory.hornFilling Fin.zero_lt_one (by simp) (horn‚ÇÇ‚ÇÅ.horn_from_path f)
    let g' := yonedaEquiv g
    use g'
    ext i; fin_cases i
    all_goals
      dsimp only [Fin.isValue, Fin.zero_eta]
      rw [Truncated.spine_arrow]
      have f_id i : f.arrow i = X.map (ùüô _).op (f.arrow i) := by aesop_cat
      rw [f_id]
      dsimp only [Nat.reduceAdd, truncation, SimplicialObject.truncation, inclusion,
        whiskeringLeft_obj_obj, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        len_mk, id_eq, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
    . have : yonedaEquiv.symm (f.arrow 0) = stdSimplex.Œ¥ 2 ‚â´ g := by
        rw [‚Üê horn‚ÇÇ‚ÇÅ.pushout_up1 f, h, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÇ]
      rw [mkOfSucc_2_0, push_yonedaEquiv _ (f.arrow 0) this, Category.id_comp]
    . dsimp only [Fin.mk_one, Fin.isValue]
      have : yonedaEquiv.symm (f.arrow 1) = stdSimplex.Œ¥ 0 ‚â´ g := by
        rw [‚Üê horn‚ÇÇ‚ÇÅ.pushout_up0 f, h, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÄ]
      rw [mkOfSucc_2_1, push_yonedaEquiv _ (f.arrow 1) this, Category.id_comp]
  fill31 horn_data := by
    obtain ‚ü®g, h‚ü© := Quasicategory.hornFilling Fin.zero_lt_one
      Fin.one_lt_last (horn‚ÇÉ‚ÇÅ.horn_from_data horn_data)
    exact horn‚ÇÉ‚ÇÅ.fill31_from_horn_extension horn_data g h
  fill32 horn_data := by
    obtain ‚ü®g, h‚ü© := Quasicategory.hornFilling (by decide)
      (by decide) (horn‚ÇÉ‚ÇÇ.horn_from_data horn_data)
    exact horn‚ÇÉ‚ÇÇ.fill32_from_horn_extension horn_data g h
