import Mathlib.AlgebraicTopology.SimplicialSet.Path
import Mathlib.AlgebraicTopology.Quasicategory.Basic

import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplexCategory
import InfinityCosmos.ForMathlib.AlgebraicTopology.SimplicialSet.Horn

import Mathlib.Topology.Spectral.Prespectral

open Simplicial SimplexCategory
open CategoryTheory SimplexCategory.Truncated Truncated.Hom SimplicialObject
open SimplicialObject.Truncated

#check PrespectralSpace.of_isTopologicalBasis'

-- TODO should these go into the SimplexCategory.Basics file?
namespace SimplexCategory

lemma mkOfSucc_2_0 : @mkOfSucc 2 0 = Œ¥ 2 := by ext i; fin_cases i <;> rfl
lemma mkOfSucc_2_1 : @mkOfSucc 2 1 = Œ¥ 0 := by ext i; fin_cases i <;> rfl

end SimplexCategory

namespace SSet
namespace Truncated

-- TODO place these somewhere nice + are they necessary?
/- The idea behind this trivial equivalence and the lemma
  is to make explicit whether an object is in a truncated simplicial set;
  this allows us to replace dsimps in proofs by a rw
-/
def truncEquiv {S : SSet} (m : ‚Ñï) {a : SimplexCategory} (ha : a.len ‚â§ m := by trunc) :
    S.obj (Opposite.op a) ‚âÉ ((truncation m).obj S).obj (Opposite.op ‚ü®a, ha‚ü©) where
  toFun := id
  invFun := id
  left_inv := congrFun rfl
  right_inv := congrFun rfl

lemma trunc_map {S : SSet} {m : ‚Ñï} {a b : SimplexCategory}
    (ha : a.len ‚â§ m := by trunc) (hb : b.len ‚â§ m := by trunc)
    {f : a ‚ü∂ b} {œÉ : S.obj (Opposite.op b)} :
    ((truncation m).obj S).map (tr f).op (truncEquiv m hb œÉ) = S.map f.op œÉ := rfl

lemma trunc_map' {S : SSet} {m : ‚Ñï} {a b : SimplexCategory}
    (ha : a.len ‚â§ m := by trunc) (hb : b.len ‚â§ m := by trunc)
    {f : a ‚ü∂ b} {œÉ : truncation m |>.obj S |>.obj (Opposite.op ‚ü®b, hb‚ü©)} :
    ((truncation m).obj S).map (tr f).op œÉ = S.map f.op œÉ := rfl

section comp_struct
variable {X : Truncated 2}
variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X _‚¶ã0‚¶å‚ÇÇ}

structure Edge (x‚ÇÄ : X _‚¶ã0‚¶å‚ÇÇ) (x‚ÇÅ : X _‚¶ã0‚¶å‚ÇÇ) where
  simplex : X _‚¶ã1‚¶å‚ÇÇ
  h‚ÇÄ : X.map (tr (Œ¥ 1)).op simplex = x‚ÇÄ
  h‚ÇÅ : X.map (tr (Œ¥ 0)).op simplex = x‚ÇÅ

structure CompStruct (e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) (e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ) where
  simplex : X _‚¶ã2‚¶å‚ÇÇ
  h‚ÇÄ‚ÇÅ : X.map (tr (Œ¥ 2)).op simplex = e‚ÇÄ‚ÇÅ.simplex
  h‚ÇÅ‚ÇÇ : X.map (tr (Œ¥ 0)).op simplex = e‚ÇÅ‚ÇÇ.simplex
  h‚ÇÄ‚ÇÇ : X.map (tr (Œ¥ 1)).op simplex = e‚ÇÄ‚ÇÇ.simplex
end comp_struct

/--
A 2-truncated quasicategory is a 2-truncated simplicial set with 3 properties:
  (2, 1)-filling
  (3, 1)-filling
  (3, 2)-filling
See `fill31.horn_data` and `fill31.filling_simplex` for the details of (3, 1)-filling,
and `fill32.horn_data` and `fill32.filling_simplex` for the details of (3, 2)-filling.
-/
structure Quasicategory‚ÇÇ (X : Truncated 2) where
  fill21 {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X _‚¶ã0‚¶å‚ÇÇ}
      (e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) :
      Nonempty (Œ£ e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ, CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ)
  fill31 {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : X _‚¶ã0‚¶å‚ÇÇ}
      {e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {e‚ÇÇ‚ÇÉ : Edge x‚ÇÇ x‚ÇÉ}
      {e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} {e‚ÇÅ‚ÇÉ : Edge x‚ÇÅ x‚ÇÉ} {e‚ÇÄ‚ÇÉ : Edge x‚ÇÄ x‚ÇÉ}
      (f‚ÇÉ : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ)
      (f‚ÇÄ : CompStruct e‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÅ‚ÇÉ)
      (f‚ÇÇ : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÉ e‚ÇÄ‚ÇÉ) :
      Nonempty (CompStruct e‚ÇÄ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÄ‚ÇÉ)

end Truncated

-- TODO: this section contains 3 lemmas moving application of yonedaEquiv around.
-- some of these might be already in the library under a different name,
-- and the proofs could probably be greatly simplified
section aux_lemmas

-- TODO name collision!
lemma map_yonedaEquiv {n m : ‚Ñï} {X : SSet} (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) (g : Œî[m] ‚ü∂ X) :
    X.map f.op (yonedaEquiv g) = g.app (Opposite.op ‚¶ãn‚¶å) (stdSimplex.objEquiv.symm f) := by
  change (g.app (Opposite.op ‚¶ãm‚¶å) ‚â´ X.map f.op) (stdSimplex.objEquiv.symm (ùüô _)) =
     g.app (Opposite.op ‚¶ãn‚¶å) (stdSimplex.objEquiv.symm f)
  rw [‚Üê g.naturality]
  dsimp
  have : Œî[m].map f.op (stdSimplex.objEquiv.symm (ùüô _)) = stdSimplex.objEquiv.symm f := by
    aesop_cat
  rw [this]
  rfl

-- TODO implicit arguments!
lemma push_yonedaEquiv {n m k : ‚Ñï} {X : SSet} (f : ‚¶ãm‚¶å ‚ü∂ ‚¶ãn‚¶å)
    (œÉ : X.obj (Opposite.op ‚¶ãn‚¶å)) {s : ‚¶ãn‚¶å ‚ü∂ ‚¶ãk‚¶å} {g : Œî[k] ‚ü∂ X}
    (h : yonedaEquiv.symm œÉ = stdSimplex.map s ‚â´ g) :
    X.map f.op œÉ = X.map (f ‚â´ s).op (yonedaEquiv g) := by
  rw [‚Üê Equiv.apply_symm_apply yonedaEquiv œÉ, h]
  have : yonedaEquiv (stdSimplex.map s ‚â´ g) = X.map s.op (yonedaEquiv g) := by
    rw [yonedaEquiv_comp, stdSimplex.yonedaEquiv_map, ‚Üê map_yonedaEquiv]
  rw [this, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp]

-- TODO rename
lemma map_yonedaEquiv' {n m : ‚Ñï} {X : SSet} (f : ‚¶ãm‚¶å ‚ü∂ ‚¶ãn‚¶å) {g : Œî[n] ‚ü∂ X} :
    yonedaEquiv (stdSimplex.map f ‚â´ g) = X.map f.op (yonedaEquiv g) := by
  rw [yonedaEquiv_comp, map_yonedaEquiv, ‚Üê stdSimplex.yonedaEquiv_map]

lemma push_yonedaEquiv' {n m : ‚Ñï} {X : SSet} {f : ‚¶ãm‚¶å ‚ü∂ ‚¶ãn‚¶å}
    {œÉ : X.obj (Opposite.op ‚¶ãm‚¶å)} {g : Œî[n] ‚ü∂ X}
    (h : yonedaEquiv.symm œÉ = stdSimplex.map f ‚â´ g) :
    œÉ = X.map f.op (yonedaEquiv g) := by
  rw [‚Üê map_yonedaEquiv']
  apply (Equiv.symm_apply_eq yonedaEquiv).1
  exact h

lemma map_comp_yonedaEquiv_symm {n m : ‚Ñï} {X : SSet} (f : .mk n ‚ü∂ .mk m)
    (s : X.obj (.op (.mk m))) :
    stdSimplex.map f ‚â´ yonedaEquiv.symm s = yonedaEquiv.symm (X.map f.op s) := by
  apply yonedaEquiv.apply_eq_iff_eq_symm_apply.1
  let s' := yonedaEquiv.symm s
  have : s = yonedaEquiv s' := (Equiv.symm_apply_eq yonedaEquiv).mp rfl
  rw [this, map_yonedaEquiv, yonedaEquiv_comp, Equiv.apply_symm_apply yonedaEquiv _,
    stdSimplex.yonedaEquiv_map]

end aux_lemmas

section horn_from_horn_data21
open SimplexCategory
open horn‚ÇÇ‚ÇÅ
namespace horn‚ÇÇ‚ÇÅ

abbrev pathEdge‚ÇÄ {X : SSet} (f : Path X 2) : Œî[1] ‚ü∂ X := yonedaEquiv.symm (f.arrow 0)
abbrev pathEdge‚ÇÅ {X : SSet} (f : Path X 2) : Œî[1] ‚ü∂ X := yonedaEquiv.symm (f.arrow 1)

def path_edges_comm {X : SSet} {f : SSet.Path X 2} : pt‚ÇÅ ‚â´ pathEdge‚ÇÅ f = pt‚ÇÄ ‚â´ pathEdge‚ÇÄ f := by
  rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm, f.arrow_src 1, f.arrow_tgt 0]; rfl

/-- Given a path of length 2 in the 2-truncation of a simplicial set `X`, construct
the obvious map Œõ[2, 1] ‚Üí X using that Œõ[2, 1] is a pushout
-/
def horn_from_path {X : SSet} (f : ((truncation 2).obj X).Path 2) : Œõ[2, 1].toSSet ‚ü∂ X :=
  Limits.PushoutCocone.IsColimit.desc horn_is_pushout (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

-- the following lemmas stem from the universal property of the horn pushout
lemma pushout_up0 {X : SSet} (f : ((truncation 2).obj X).Path 2) :
    hornTwo_edge‚ÇÄ ‚â´ horn_from_path f = yonedaEquiv.symm (f.arrow 1) :=
  Limits.PushoutCocone.IsColimit.inl_desc horn_is_pushout
    (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

lemma pushout_up1 {X : SSet} (f : ((truncation 2).obj X).Path 2) :
    hornTwo_edge‚ÇÇ ‚â´ horn_from_path f = yonedaEquiv.symm (f.arrow 0) :=
  Limits.PushoutCocone.IsColimit.inr_desc horn_is_pushout
    (pathEdge‚ÇÅ f) (pathEdge‚ÇÄ f) path_edges_comm

end horn‚ÇÇ‚ÇÅ

section horn21_comp_struct
open Truncated (Edge CompStruct truncEquiv trunc_map trunc_map')
open horn‚ÇÇ‚ÇÅ

variable {S : SSet} {x‚ÇÄ x‚ÇÅ x‚ÇÇ : ((truncation 2).obj S) _‚¶ã0‚¶å‚ÇÇ}
  (e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ)

abbrev edge_map {y‚ÇÄ y‚ÇÅ : ((truncation 2).obj S) _‚¶ã0‚¶å‚ÇÇ} (e : Edge y‚ÇÄ y‚ÇÅ) : Œî[1] ‚ü∂ S :=
  yonedaEquiv.symm e.simplex

def path_edges_comm : pt‚ÇÅ ‚â´ edge_map e‚ÇÅ‚ÇÇ = pt‚ÇÄ ‚â´ edge_map e‚ÇÄ‚ÇÅ := by
  rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm]
  congr 1
  apply Eq.trans
  . exact e‚ÇÅ‚ÇÇ.h‚ÇÄ
  . symm; exact e‚ÇÄ‚ÇÅ.h‚ÇÅ

-- TODO fix unintuitive order of edges
def horn_from_data21 : Œõ[2, 1].toSSet ‚ü∂ S :=
  Limits.PushoutCocone.IsColimit.desc horn_is_pushout
    (edge_map e‚ÇÅ‚ÇÇ) (edge_map e‚ÇÄ‚ÇÅ) (path_edges_comm e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ)

lemma aux0: hornTwo_edge‚ÇÄ ‚â´ (horn_from_data21 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ) = yonedaEquiv.symm e‚ÇÅ‚ÇÇ.simplex :=
  Limits.PushoutCocone.IsColimit.inl_desc horn_is_pushout
    (edge_map e‚ÇÅ‚ÇÇ) (edge_map e‚ÇÄ‚ÇÅ) (path_edges_comm e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ)

lemma aux1: hornTwo_edge‚ÇÇ ‚â´ (horn_from_data21 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ) = yonedaEquiv.symm e‚ÇÄ‚ÇÅ.simplex :=
  Limits.PushoutCocone.IsColimit.inr_desc horn_is_pushout
    (edge_map e‚ÇÅ‚ÇÇ) (edge_map e‚ÇÄ‚ÇÅ) (path_edges_comm e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ)

def fill21'
    (g : Œî[2] ‚ü∂ S)
    (comm : horn_from_data21 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ = Œõ[2, 1].Œπ ‚â´ g) :
    Œ£ e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ, CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ := by
  constructor; swap
  exact {
    simplex := (truncEquiv 2) <| yonedaEquiv <| stdSimplex.Œ¥ 1 ‚â´ g
    h‚ÇÄ := by
      rw [‚Üê e‚ÇÄ‚ÇÅ.h‚ÇÄ, trunc_map, trunc_map']
      have : yonedaEquiv.symm (e‚ÇÄ‚ÇÅ.simplex) = stdSimplex.Œ¥ 2 ‚â´ g := by
        rw [‚Üê aux1 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ, comm, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÇ]
      rw [push_yonedaEquiv _ _ this]
      have : Œ¥ 1 ‚â´ Œ¥ 2 = Œ¥ 1 ‚â´ @Œ¥ 1 1 :=
        SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 1) (j := 1) (le_refl 1)
      rw [this]
      apply push_yonedaEquiv
      rw [Equiv.symm_apply_apply]; rfl
    h‚ÇÅ := by
      rw [‚Üê e‚ÇÅ‚ÇÇ.h‚ÇÅ, trunc_map, trunc_map']
      have : yonedaEquiv.symm (e‚ÇÅ‚ÇÇ.simplex) = stdSimplex.Œ¥ 0 ‚â´ g := by
        rw [‚Üê aux0 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ, comm, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÄ]
      rw [push_yonedaEquiv _ _ this]
      have : Œ¥ 0 ‚â´ Œ¥ 0 = Œ¥ 0 ‚â´ @Œ¥ 1 1 :=
        (SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 0) (le_refl 0)).symm
      rw [this]
      apply push_yonedaEquiv
      rw [Equiv.symm_apply_apply]; rfl
  }
  exact {
    simplex := (truncEquiv 2) <| yonedaEquiv g
    h‚ÇÄ‚ÇÅ := by
      rw [trunc_map]
      have : yonedaEquiv.symm (e‚ÇÄ‚ÇÅ.simplex) = stdSimplex.Œ¥ 2 ‚â´ g := by
        rw [‚Üê aux1 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ, comm, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÇ]
      rw [‚Üê push_yonedaEquiv' this]
    h‚ÇÅ‚ÇÇ := by
      rw [trunc_map]
      have : yonedaEquiv.symm (e‚ÇÅ‚ÇÇ.simplex) = stdSimplex.Œ¥ 0 ‚â´ g := by
        rw [‚Üê aux0 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ, comm, ‚Üê Category.assoc, horn‚ÇÇ‚ÇÅ.incl‚ÇÄ]
      rw [‚Üê push_yonedaEquiv' this]
    h‚ÇÄ‚ÇÇ := by
      rw [trunc_map]
      dsimp only [len_mk, id_eq, Nat.reduceAdd, Fin.isValue, eq_mpr_eq_cast, cast_eq, op_comp,
        Fin.succ_zero_eq_one, Fin.castSucc_zero]
      rw [‚Üê map_yonedaEquiv']; rfl
  }

end horn21_comp_struct

end horn_from_horn_data21

/- define the structures Edge and CompStruct for a 2-truncated simplicial set `X : Truncated 2`
  and vertices `x‚ÇÄ`, ..., `x‚ÇÉ`
-/

section fill31_comp_struct

open Truncated (CompStruct Edge)

variable {S : SSet}
variable
    {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : ((truncation 2).obj S) _‚¶ã0‚¶å‚ÇÇ}
    {e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {e‚ÇÇ‚ÇÉ : Edge x‚ÇÇ x‚ÇÉ}
    {e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} {e‚ÇÅ‚ÇÉ : Edge x‚ÇÅ x‚ÇÉ} {e‚ÇÄ‚ÇÉ : Edge x‚ÇÄ x‚ÇÉ}
    (f‚ÇÉ : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ)
    (f‚ÇÄ : CompStruct e‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÅ‚ÇÉ)
    (f‚ÇÇ : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÉ e‚ÇÄ‚ÇÉ)

include S x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÄ‚ÇÇ e‚ÇÅ‚ÇÉ e‚ÇÄ‚ÇÉ f‚ÇÉ f‚ÇÄ f‚ÇÇ
open horn‚ÇÉ‚ÇÅ
#check horn‚ÇÉ‚ÇÅ.multispan_index


/- steps of constructing fill31' from (g : Œî[3] ‚ü∂ X):
  . construct a multicofork from the given CompStructs
  . construct a map h : Œõ[3, 1] ‚ü∂ X such that h = Œõ[3, 1].Œπ ‚â´ g
  . make a CompStruct with simplex given by g, prove equalities
-/
def œÄ' (a : R) : (Œî[2] ‚ü∂ S) := match a with
  | ‚ü®0, _‚ü© => yonedaEquiv.symm f‚ÇÄ.simplex
  | ‚ü®1, _‚ü© => by contradiction
  | ‚ü®2, _‚ü© => yonedaEquiv.symm f‚ÇÇ.simplex
  | ‚ü®3, _‚ü© => yonedaEquiv.symm f‚ÇÉ.simplex

def face (a : R) : S _‚¶ã2‚¶å := match a with
  | ‚ü®0, _‚ü© => f‚ÇÄ.simplex
  | ‚ü®1, _‚ü© => by contradiction
  | ‚ü®2, _‚ü© => f‚ÇÇ.simplex
  | ‚ü®3, _‚ü© => f‚ÇÉ.simplex

abbrev R‚ÇÄ : R := ‚ü®0, by omega‚ü©
abbrev R‚ÇÇ : R := ‚ü®2, by omega‚ü©
abbrev R‚ÇÉ : R := ‚ü®3, by omega‚ü©

lemma edge‚ÇÄ‚ÇÇ : S.map (Œ¥ 1).op (face f‚ÇÉ f‚ÇÄ f‚ÇÇ R‚ÇÉ) = e‚ÇÄ‚ÇÇ.simplex := by
  dsimp only [Nat.reduceAdd, Fin.isValue, face]
  exact f‚ÇÉ.h‚ÇÄ‚ÇÇ

-- The multicofork ‚®ø Œî[1] ‚áâ ‚®ø Œî[2] ‚Üí X defined by sending Œî[2]s to
-- each of the three simplices in the combinatorial `horn_data`
def multicofork_from_data : Limits.Multicofork multispan_index :=
  Limits.Multicofork.ofœÄ multispan_index S
    (œÄ' f‚ÇÉ f‚ÇÄ f‚ÇÇ)
    (by
      rintro ‚ü®‚ü®‚ü®i, i_ne_1‚ü©, ‚ü®j, j_ne_1‚ü©‚ü©, i_lt_j‚ü©
      fin_cases i <;> fin_cases j <;> try contradiction
      all_goals
        dsimp [J, multispan_index, œÄ']
        rw [map_comp_yonedaEquiv_symm, map_comp_yonedaEquiv_symm]
        congr 1
      -- rw doesn't work because the statement is about `SSet`, not `Truncated 2`
      . apply Eq.trans
        exact f‚ÇÄ.h‚ÇÄ‚ÇÇ
        symm; exact f‚ÇÇ.h‚ÇÅ‚ÇÇ
      . apply Eq.trans
        exact f‚ÇÄ.h‚ÇÄ‚ÇÅ
        symm; exact f‚ÇÉ.h‚ÇÅ‚ÇÇ
      . apply Eq.trans
        exact f‚ÇÇ.h‚ÇÄ‚ÇÅ
        symm; exact f‚ÇÉ.h‚ÇÄ‚ÇÅ)

-- using the fact that Œõ[3, 1] is the coequalizer gives a map Œõ[3, 1] ‚Üí X
def horn_from_data : Œõ[3, 1].toSSet ‚ü∂ S := Limits.IsColimit.desc horn‚ÇÉ‚ÇÅ.isMulticoeq
  (multicofork_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ)

-- TODO rename these to something more useful
lemma mcofork_up0 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÄ ‚â´ (horn_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) = yonedaEquiv.symm f‚ÇÄ.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) (.right R‚ÇÄ)

lemma mcofork_up2 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÇ ‚â´ (horn_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) = yonedaEquiv.symm f‚ÇÇ.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) (.right R‚ÇÇ)

lemma mcofork_up3 : horn‚ÇÉ‚ÇÅ.Œπ‚ÇÉ ‚â´ (horn_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) = yonedaEquiv.symm f‚ÇÉ.simplex :=
  horn‚ÇÉ‚ÇÅ.isMulticoeq.fac (multicofork_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ) (.right R‚ÇÉ)

-- TODO add congruence lemma?
def fill31_from_horn_extension'
    (g : Œî[3] ‚ü∂ S)
    (comm : horn_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ = Œõ[3, 1].Œπ ‚â´ g) :
    (CompStruct e‚ÇÄ‚ÇÇ e‚ÇÇ‚ÇÉ e‚ÇÄ‚ÇÉ) := by
  have y0 : yonedaEquiv.symm f‚ÇÄ.simplex = stdSimplex.Œ¥ 0 ‚â´ g := by
    rw [‚Üê mcofork_up0, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÄ]
  have y2 : yonedaEquiv.symm f‚ÇÇ.simplex = stdSimplex.Œ¥ 2 ‚â´ g := by
    rw [‚Üê mcofork_up2, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÇ]
  have y3 : yonedaEquiv.symm f‚ÇÉ.simplex = stdSimplex.Œ¥ 3 ‚â´ g := by
    rw [‚Üê mcofork_up3, comm, ‚Üê Category.assoc, horn‚ÇÉ‚ÇÅ.incl‚ÇÉ]
  exact {
    simplex := S.map (Œ¥ 1).op (yonedaEquiv g)
    h‚ÇÄ‚ÇÅ := by
      rw [‚Üê f‚ÇÉ.h‚ÇÄ‚ÇÇ]
      have := Œ¥_comp_Œ¥ (n := 1) (i := 1) (j := 2) (by simp)
      dsimp at this
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y3, this]
    h‚ÇÅ‚ÇÇ := by
      rw [‚Üê f‚ÇÄ.h‚ÇÅ‚ÇÇ]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y0]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      exact @Œ¥_comp_Œ¥ _ 0 0 (le_refl 0)
    h‚ÇÄ‚ÇÇ := by
      rw [‚Üê f‚ÇÇ.h‚ÇÄ‚ÇÇ]
      dsimp only [truncation, SimplicialObject.truncation, inclusion, whiskeringLeft_obj_obj,
        len_mk, id_eq, Functor.comp_obj, Functor.op_obj, fullSubcategoryInclusion.obj,
        Nat.reduceAdd, Fin.isValue, tr, Functor.comp_map, Functor.op_map, Quiver.Hom.unop_op,
        fullSubcategoryInclusion.map]
      rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, push_yonedaEquiv _ _ y2]
      apply congr_fun
      apply Prefunctor.congr_map
      apply (Opposite.op_inj_iff _ _).2
      symm; exact @Œ¥_comp_Œ¥ _ 1 1 (le_refl 1)}

end fill31_comp_struct

def two_truncatation_of_qc_is_2_trunc_qc {X : SSet} [Quasicategory X] :
    Truncated.Quasicategory‚ÇÇ ((truncation 2).obj X) where
  fill21 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ := by
    obtain ‚ü®g, h‚ü© := Quasicategory.hornFilling Fin.zero_lt_one (by simp) (horn_from_data21 e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ)
    apply Nonempty.intro
    exact (fill21' e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ g h)
  fill31 f‚ÇÉ f‚ÇÄ f‚ÇÇ := by
    obtain ‚ü®g, h‚ü© := Quasicategory.hornFilling Fin.zero_lt_one (by simp) (horn_from_data f‚ÇÉ f‚ÇÄ f‚ÇÇ)
    apply Nonempty.intro
    exact (fill31_from_horn_extension' f‚ÇÉ f‚ÇÄ f‚ÇÇ g h)
